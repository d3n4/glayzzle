#!/usr/bin/env node

/**
 * Glayzzle : PHP on NodeJS
 * @url http://glayzzle.com
 * @author Ioan CHIRIAC
 * @license BSD-3-Clause
 */

var util = require('util');
var fs = require('fs');
var PHP = require('../src/php');
var http = require('http');
var cluster = require('cluster');

function printVersion() {
  util.puts('Glayzzle version ' + PHP.VERSION);
}

function printHelp() {
  util.puts('Usage: glz [options] [-f] <file>');
  util.puts('');
  util.puts('  --build                        Rebuilds the parser');
  util.puts('  --debug [0-9]+                 Enables debug ouput (with a specific level)');
  util.puts('  -f <file>                      Parse and execute file');
  util.puts('  -S <addr>:<port>               Run with built-in web server.')
  util.puts('  -v, --version                  Print version information and exit');
  util.puts('  -h, --help                     Print help and exit');
}

// aborts the execution with the specified error message
function abort(message) {
  util.error(message);
  process.exit(1);
}

/* Arguments */
var options = {
  debug: process.argv[1] == '--debug' ||  process.argv[1] == '--debug-brk' ? 10 : 0,
  build: false,
  filename: null,
  server: false
};
var args = process.argv.slice(2); // Trim 'node' and the script path.

function isOption(arg) {
  return (/^-/).test(arg);
}

function nextArg() {
  args.shift();
}

// Reading arguments
while (args.length > 0 && isOption(args[0])) {
  switch(args[0]) {
    case '-f':
      nextArg();
      options.filename = args[0];
      break;

    case '--debug':
      nextArg();
      options.debug = args[0];
      break;

    case '--build':
      options.build = true;
      break;

    case '-v':
    case '--version':
      printVersion();
      process.exit(0);
      break;

    case '-S':
      nextArg();
      options.server = args[0];
      break;

    case '-h':
    case '--help':
      printHelp();
      process.exit(0);
      break;

    default:
      abort('Unknown option: ' + args[0] + '.');
  }
  nextArg();
}

// Checking last parameters
if ( args.length > 0 ) {
  if ( args.length == 1 && !options.filename ) {
    options.filename = args[0];
  } else {
    abort('Too many arguments.');
  }
}

if ( !options.filename ) {
  abort('Expecting a filename.');
}

if (options.debug) console.log('*** DEBUG MODE ***');
process.env.DEBUG = options.debug;

// Handling the parser build
if ( options.build ) {
  require('../src/builder').compile(
    function() {
      run(options);
    }
    , function(err) {
      abort(err);
    }
  );
} else {
  run(options);
}

// runs the command
function run(options) {
  PHP.clean();
  if (options.server) {
    if (cluster.isMaster) {
      printVersion();
      console.log('Started at ' + (new Date()));
      console.log('Listening at ' + options.server);
    }
    if ( process.env.DEBUG == 0 && cluster.isMaster) {
      var numCPUs = require('os').cpus().length;
      // Fork workers.
      for (var i = 0; i < numCPUs; i++) {
        cluster.fork();
      }
      console.log('Started ' + numCPUs + ' workers...\n');
      cluster.on('exit', function(worker, code, signal) {
        console.log('worker ' + worker.process.pid + ' died');
        cluster.fork();
      });
    } else {
      var endpoint = options.server.split(':');
      http.createServer(function(req, res) {
        if (options.debug) {
          var now = new Date();
          console.log(now.getHours()+':'+now.getMinutes()+':'+now.getSeconds() + '\t' + req.method + ' ' + req.url);
        }
        try {
          PHP.include(options.filename, false, res);
          res.end();
        } catch(e) {
          util.error(e);
          res.end('Error : ' + e.message);
        }
      }).listen(parseInt(endpoint[1]), endpoint[0]);
    }
  } else {
    // RUNS THE SPECIFIED SCRIPT
    PHP.include(options.filename);
  }
}