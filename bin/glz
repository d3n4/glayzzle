#!/usr/bin/env node

/**
 * Glayzzle : PHP on NodeJS
 * @url http://glayzzle.com
 * @author Ioan CHIRIAC
 * @license BSD-3-Clause
 */

var util = require('util');
var fs = require('fs');
var PHP = require('../src/php');


function printVersion() {
  util.puts('Glayzzle ' + PHP.VERSION + ' (cli) - (c) 2014 Ioan Chiriac');
  util.puts('Distributed under BSD License - http://glayzzle.com');
}

function printHelp() {
  util.puts('Usage: glz [options] [-f] <file>');
  util.puts('');
  util.puts('  -r <code>        Run PHP <code> without using script tags <?..?>');
  util.puts('  -f <file>        Parse and execute file');
  util.puts('  -S <addr>:<port> Run with built-in web server.')
  util.puts('  -v, --version    Print version information and exit');
  util.puts('  -h, --help       Print help and exit');
}

// aborts the execution with the specified error message
function abort(message) {
  util.error(message);
  process.exit(1);
}

/* Arguments */
var options = {
  eval: null,
  filename: null,
  server: false
};
var args = process.argv.slice(2); // Trim 'node' and the script path.

function isOption(arg) {
  return (/^-/).test(arg);
}

function nextArg() {
  args.shift();
}

// Reading arguments
while (args.length > 0 && isOption(args[0])) {
  switch(args[0]) {
    case '-f':
      nextArg();
      options.filename = args[0];
      break;

    case '-r':
      nextArg();
      options.eval = args[0];
      break;

    case '-S':
      nextArg();
      options.server = args[0];
      break;

    case '-h':
    case '--help':
      printHelp();
      process.exit(0);
      break;

    case '-v':
    case '--version':
      printVersion();
      process.exit(0);
      break;

    default:
      abort('Unknown option: ' + args[0] + '. Use --help for available commands.');
  }
  nextArg();
}

// Checking last parameters
if ( args.length > 0 ) {
  if ( args.length == 1 && !options.filename ) {
    options.filename = args[0];
  } else {
    abort('Too many arguments.');
  }
}

if ( !options.filename && !options.eval ) {
  abort('Expecting a filename or an input code. Use --help for available commands.');
}

// initialize environement
process.env.DEBUG = false;
PHP.clean();

// runs the command
if (options.server) {
  var http = require('http');
  var cluster = require('cluster');
  if (cluster.isMaster) {
    printVersion();
    console.log('Started at ' + (new Date()));
    console.log('Listening at ' + options.server);
  }
  if ( process.env.DEBUG == 0 && cluster.isMaster) {
    var numCPUs = require('os').cpus().length;
    // Fork workers.
    for (var i = 0; i < numCPUs; i++) {
      cluster.fork();
    }
    console.log('Started ' + numCPUs + ' workers...\n');
    cluster.on('exit', function(worker, code, signal) {
      console.log('worker ' + worker.process.pid + ' died');
      cluster.fork();
    });
  } else {
    var endpoint = options.server.split(':');
    http.createServer(function(req, res) {
      if (options.debug) {
        var now = new Date();
        console.log(now.getHours()+':'+now.getMinutes()+':'+now.getSeconds() + '\t' + req.method + ' ' + req.url);
      }
      try {
        PHP.include(options.filename, false, res);
        res.end();
      } catch(e) {
        util.error(e);
        res.end('Error : ' + e.message);
      }
    }).listen(parseInt(endpoint[1]), endpoint[0]);
  }
} else if(options.filename) {
  // runs the specified script
  PHP.include(options.filename);
} else if(options.eval) {
  // evaluate the eval arg
  PHP.eval(options.eval);
}
