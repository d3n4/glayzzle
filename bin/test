#!/usr/bin/env node

/**
 * Magma : PHP on NodeJS
 * @license BSD
 */
require('colors');
var util = require('util');
var fs = require('fs');
var path = require('path');
var jsdiff = require('diff');
var PHP = require('../src/php');

function printVersion() {
  util.puts('Magma version ' + PHP.VERSION);
}

function printHelp() {
  util.puts('Usage: test [options] [-f] <file>');
  util.puts('');
  util.puts('  --debug [0-9]+                 Enables debug ouput (with a specific level)');
  util.puts('  -f <file>                      Parse and test the specified file');
  util.puts('  -d <path>                      Parse each file in the specified path')
  util.puts('  -r                             Use recursivity with the specified path')
  util.puts('  -v, --version                  Print version information and exit');
  util.puts('  -h, --help                     Print help and exit');
}


// aborts the execution with the specified error message
function abort(message) {
  util.error(message);
  process.exit(1);
}

/* Arguments */
var options = {
  debug: 0,
  filename: null,
  path: null,
  recursive: false
};
var args = process.argv.slice(2); // Trim 'node' and the script path.

function isOption(arg) {
  return (/^-/).test(arg);
}

function nextArg() {
  args.shift();
}

// Reading arguments
while (args.length > 0 && isOption(args[0])) {
  switch(args[0]) {
    case '-f':
      nextArg();
      options.filename = args[0];
      break;

    case '--debug':
      nextArg();
      options.debug = args[0];
      break;

    case '-d':
      nextArg();
      options.path = args[0];
      break;

    case '-r':
      options.recusive = true;
      break;

    case '-v':
    case '--version':
      printVersion();
      process.exit(0);
      break;

    case '-h':
    case '--help':
      printHelp();
      process.exit(0);
      break;

    default:
      abort('Unknown option: ' + args[0] + '.');
  }
  nextArg();
}


// Checking last parameters
if ( args.length > 0 ) {
  if ( args.length == 1 && !options.filename ) {
    options.filename = args[0];
  } else {
    abort('Too many arguments.');
  }
}

if ( !options.filename && !options.path ) {
  abort('Expecting a filename or a path.');
}

process.env.DEBUG = options.debug;

// declare a file running test with phpt format
function test_phpt(data) {
  try {
    var test = {};
    var mode = null;
    data.forEach(function(line) {
      if (line.substring(0, 2) == '--') {
        mode = line.substring(2, line.length - 2);
        test[mode] = '';
      } else {
        test[mode] += line + '\r\n';
      }
    });
    console.log('   >> Start test : ' + test.TEST);
    var writer = {
      buffer: '',
      write: function(output) {
        this.buffer += output;
      }
    };
    PHP.clean().eval(test.FILE.substring(5), false, writer);
    if (test['EXPECTF-'] != writer.buffer) {
      console.log('Expected : ' + JSON.stringify(test['EXPECTF-']));
      console.log('Found : ' + JSON.stringify(writer.buffer));
      var diff = jsdiff.diffChars(test['EXPECTF-'], writer.buffer);
      diff.forEach(function(part){
        // green for additions, red for deletions
        // grey for common parts
        var color = part.added ? 'green' :
          part.removed ? 'red' : 'grey';
        process.stderr.write(part.value[color]);
      });
      return false;
    } else return true;
  } catch(e) {
    util.error( (e.stack || e) + '\n' );
    return false;
  }
}

function test_parser(data) {
  try {
    console.log('   >> Start test : ' + data.shift());
    var test = {
      buffer: '',
      mode: ''
    };
    var tests =  [];
    data.forEach(function(line) {
      if (line.substring(0, 2) == '--') {
        if (test.mode != '') tests.push(test);
        test = {
          buffer: '', mode: line.substring(2, line.length - 2)
        };
      } else {
        test.buffer += line + '\r\n';
      }
    });
    if (test) tests.push(test);
    var writer;
    var ok;
    for(var i = 0; i < tests.length; i++) {
      test=tests[i];
      writer = {
        buffer: '',
        write: function(output) {
          this.buffer += output;
        }
      };
      console.log('   mode : ' + test.mode);
      if (test.mode.substring(0, 4) == 'FAIL') {
        ok = false;
        try {
          PHP.clean().eval(test.buffer, false, writer);
          ok = true;
        } catch(e) {
          ok = false;
        }
        if (ok) {
          throw new Error('Test should fail to parse : \n>> ' + test.buffer);
        }
      } else {
        try {
          PHP.clean().eval(test.buffer, false, writer);
        } catch(e) {
          e.source = test.buffer;
          throw e;
        }
      }
    }
    return true;
  } catch(e) {
    PHP.context.parseError(e, e.source);
    return false;
  }
}
function getExtension(filename) {
    var i = filename.lastIndexOf('.');
    return (i < 0) ? '' : filename.substr(i);
}
function test(filename) {
  console.log(' + ' + filename);
  try {
    var data = fs.readFileSync(filename).toString().split('\r\n');
    switch(getExtension(filename)) {
      case '.phpt':
        return test_phpt(data);
        break;
      case '.parser':
        return test_parser(data);
        break;
      default:
        abort('\nUnrecognized extension "'+getExtension(filename)+'" for ' + filename + ', expected a phpt or parse file');
    }
  } catch(e) {
    util.error( (e.stack || e) + '\n' );
    return false;
  }
}

// rebuilds the parser
console.log('\nRefresh parser...\n');
require('../src/builder').compile(
  function() {
    console.log('\n*** TESTING ***\n'.yellow);
    if (options.filename) {
      if (!test(options.filename)) {
        abort('Error: test FAILED !!!'.red);
      } else {
        console.log('Success'.green);
      }
      // fs.readdir()
    }
  }
  , function(err) {
    abort(err);
  }
);
