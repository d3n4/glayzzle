/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[10,15],$V2=[35,36];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"start_repetition0":4,"top_statement":5,"constant_declaration":6,"T_CONST":7,"constant_item":8,"constant_declaration_repetition0":9,";":10,"T_STRING":11,"=":12,"static_scalar":13,"optionnal_constant_item":14,",":15,"static_scalar_option0":16,"static_scalar_group0":17,"T_CONSTANT_ENCAPSED_STRING":18,"T_LINE":19,"T_FILE":20,"T_DIR":21,"T_TRAIT_C":22,"T_METHOD_C":23,"T_FUNC_C":24,"T_NS_C":25,"T_START_HEREDOC":26,"T_ENCAPSED_AND_WHITESPACE":27,"T_END_HEREDOC":28,"variable":29,"const_variable":30,"T_VARIABLE":31,"static_scalar_option0_group0":32,"+":33,"-":34,"T_LNUMBER":35,"T_DNUMBER":36,"$accept":0,"$end":1},
terminals_: {2:"error",7:"T_CONST",10:";",11:"T_STRING",12:"=",15:",",18:"T_CONSTANT_ENCAPSED_STRING",19:"T_LINE",20:"T_FILE",21:"T_DIR",22:"T_TRAIT_C",23:"T_METHOD_C",24:"T_FUNC_C",25:"T_NS_C",26:"T_START_HEREDOC",27:"T_ENCAPSED_AND_WHITESPACE",28:"T_END_HEREDOC",31:"T_VARIABLE",33:"+",34:"-",35:"T_LNUMBER",36:"T_DNUMBER"},
productions_: [0,[3,1],[5,1],[6,4],[8,3],[14,2],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,3],[13,2],[29,1],[30,1],[4,0],[4,2],[9,0],[9,2],[32,1],[32,1],[16,0],[16,1],[17,1],[17,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0] || []; 
break;
case 2:
 
    /* top_statement : const */ this.$ = $$[$0]; 
  
break;
case 3:

  $$[$0-1].unshift($$[$0-2]);
  this.$ = ['define', $$[$0-1]];

break;
case 4:

  this.$ = [$$[$0-2], $$[$0]];

break;
case 5:

  this.$ = $$[$0];

break;
case 6:
 this.$ = ['number', ($$[$0-1] ? $$[$0-1] : '') + $$[$0]]; 
break;
case 7:
 this.$ = ['string', $$[$0].substring(1, $$[$0].length - 1)]; 
break;
case 8:
 this.$ = ['const', $$[$0]]; 
break;
case 9:
 this.$ = ['number', this.lexer.yylloc.last_line]; 
break;
case 10: case 11: case 12: case 13: case 14: case 15:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = ['string', $$[$0-1]]; 
break;
case 17:
 this.$ = ['string', '']; 
break;
case 18:
 this.$ = $$[$0] 
break;
case 19:
 /* const_variable */ this.$ = ['let', ['const', $$[$0].substring(1)]]; 
break;
case 20: case 22:
this.$ = [];
break;
case 21: case 23:
$$[$0-1].push($$[$0]);
break;
}
},
table: [o($V0,[2,20],{3:1,4:2}),{1:[3]},{1:[2,1],5:3,6:4,7:[1,5]},o($V0,[2,21]),o($V0,[2,2]),{8:6,11:$V0},o($V1,[2,22],{9:8}),{12:[1,9]},{10:[1,10],14:11,15:[1,12]},o($V2,[2,26],{13:13,16:14,32:25,11:[1,16],18:[1,15],19:[1,17],20:[1,18],21:[1,19],22:[1,20],23:[1,21],24:[1,22],25:[1,23],26:[1,24],33:[1,26],34:[1,27]}),o($V0,[2,3]),o($V1,[2,23]),{8:28,11:$V0},o($V1,[2,4]),{17:29,35:[1,30],36:[1,31]},o($V1,[2,7]),o($V1,[2,8]),o($V1,[2,9]),o($V1,[2,10]),o($V1,[2,11]),o($V1,[2,12]),o($V1,[2,13]),o($V1,[2,14]),o($V1,[2,15]),{27:[1,32],28:[1,33]},o($V2,[2,27]),o($V2,[2,24]),o($V2,[2,25]),o($V1,[2,5]),o($V1,[2,6]),o($V1,[2,28]),o($V1,[2,29]),{28:[1,34]},o($V1,[2,17]),o($V1,[2,16])],
defaultActions: {},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
try { var lexer = require('./lexer.js'); } catch(e) { } 

parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}