module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = function(statements) {
            return statements;
          },
        peg$c2 = { type: "other", description: "number" },
        peg$c3 = peg$FAILED,
        peg$c4 = void 0,
        peg$c5 = "$",
        peg$c6 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c7 = function(literal) {
              return literal;
            },
        peg$c8 = ".",
        peg$c9 = { type: "literal", value: ".", description: "\".\"" },
        peg$c10 = null,
        peg$c11 = function() {
              return parseFloat(text());
            },
        peg$c12 = "0",
        peg$c13 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c14 = /^[0-9]/,
        peg$c15 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c16 = /^[1-9]/,
        peg$c17 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c18 = "e",
        peg$c19 = { type: "literal", value: "e", description: "\"e\"" },
        peg$c20 = /^[+\-]/,
        peg$c21 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
        peg$c22 = "0x",
        peg$c23 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c24 = function(digits) {
              return parseInt(digits, 16);
             },
        peg$c25 = /^[0-9a-f]/i,
        peg$c26 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
        peg$c27 = { type: "other", description: "string" },
        peg$c28 = "\"",
        peg$c29 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c30 = function(chars) {
              return {type: 'common.T_STRING', char: '"', data: chars.join("")};
            },
        peg$c31 = "'",
        peg$c32 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c33 = function(chars) {
              return {type: 'common.T_STRING', char: "'", data: chars.join("")};
            },
        peg$c34 = "\\",
        peg$c35 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c36 = { type: "any", description: "any character" },
        peg$c37 = function() { return text(); },
        peg$c38 = function(s) { return s; },
        peg$c39 = function() { return "\0"; },
        peg$c40 = "b",
        peg$c41 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c42 = function() { return "\b";   },
        peg$c43 = "f",
        peg$c44 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c45 = function() { return "\f";   },
        peg$c46 = "n",
        peg$c47 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c48 = function() { return "\n";   },
        peg$c49 = "r",
        peg$c50 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c51 = function() { return "\r";   },
        peg$c52 = "t",
        peg$c53 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c54 = function() { return "\t";   },
        peg$c55 = "v",
        peg$c56 = { type: "literal", value: "v", description: "\"v\"" },
        peg$c57 = function() { return "\x0B"; },
        peg$c58 = "x",
        peg$c59 = { type: "literal", value: "x", description: "\"x\"" },
        peg$c60 = "u",
        peg$c61 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c62 = function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        peg$c63 = { type: "other", description: "Operators" },
        peg$c64 = "|",
        peg$c65 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c66 = "&",
        peg$c67 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c68 = "^",
        peg$c69 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c70 = function() { return '+'; },
        peg$c71 = "+",
        peg$c72 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c73 = "-",
        peg$c74 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c75 = "*",
        peg$c76 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c77 = "/",
        peg$c78 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c79 = "%",
        peg$c80 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c81 = { type: "other", description: "RelationalOperator" },
        peg$c82 = "<",
        peg$c83 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c84 = ">",
        peg$c85 = { type: "literal", value: ">", description: "\">\"" },
        peg$c86 = "!",
        peg$c87 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c88 = "~",
        peg$c89 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c90 = "=",
        peg$c91 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c92 = { type: "other", description: "T_INCLUDE" },
        peg$c93 = "include",
        peg$c94 = { type: "literal", value: "include", description: "\"include\"" },
        peg$c95 = { type: "other", description: "T_INCLUDE_ONCE" },
        peg$c96 = "include_once",
        peg$c97 = { type: "literal", value: "include_once", description: "\"include_once\"" },
        peg$c98 = { type: "other", description: "T_REQUIRE" },
        peg$c99 = "require",
        peg$c100 = { type: "literal", value: "require", description: "\"require\"" },
        peg$c101 = { type: "other", description: "T_REQUIRE_ONCE" },
        peg$c102 = "require_once",
        peg$c103 = { type: "literal", value: "require_once", description: "\"require_once\"" },
        peg$c104 = { type: "other", description: "T_EVAL" },
        peg$c105 = "eval",
        peg$c106 = { type: "literal", value: "eval", description: "\"eval\"" },
        peg$c107 = "or",
        peg$c108 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c109 = "xor",
        peg$c110 = { type: "literal", value: "xor", description: "\"xor\"" },
        peg$c111 = "and",
        peg$c112 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c113 = "print",
        peg$c114 = { type: "literal", value: "print", description: "\"print\"" },
        peg$c115 = "yield",
        peg$c116 = { type: "literal", value: "yield", description: "\"yield\"" },
        peg$c117 = "+=",
        peg$c118 = { type: "literal", value: "+=", description: "\"+=\"" },
        peg$c119 = "-=",
        peg$c120 = { type: "literal", value: "-=", description: "\"-=\"" },
        peg$c121 = "*=",
        peg$c122 = { type: "literal", value: "*=", description: "\"*=\"" },
        peg$c123 = "/=",
        peg$c124 = { type: "literal", value: "/=", description: "\"/=\"" },
        peg$c125 = ".=",
        peg$c126 = { type: "literal", value: ".=", description: "\".=\"" },
        peg$c127 = "%=",
        peg$c128 = { type: "literal", value: "%=", description: "\"%=\"" },
        peg$c129 = "&=",
        peg$c130 = { type: "literal", value: "&=", description: "\"&=\"" },
        peg$c131 = "|=",
        peg$c132 = { type: "literal", value: "|=", description: "\"|=\"" },
        peg$c133 = "^=",
        peg$c134 = { type: "literal", value: "^=", description: "\"^=\"" },
        peg$c135 = "<<=",
        peg$c136 = { type: "literal", value: "<<=", description: "\"<<=\"" },
        peg$c137 = ">>=",
        peg$c138 = { type: "literal", value: ">>=", description: "\">>=\"" },
        peg$c139 = "||",
        peg$c140 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c141 = "&&",
        peg$c142 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c143 = "==",
        peg$c144 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c145 = "!=",
        peg$c146 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c147 = "===",
        peg$c148 = { type: "literal", value: "===", description: "\"===\"" },
        peg$c149 = "!==",
        peg$c150 = { type: "literal", value: "!==", description: "\"!==\"" },
        peg$c151 = "<=",
        peg$c152 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c153 = ">=",
        peg$c154 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c155 = "<<",
        peg$c156 = { type: "literal", value: "<<", description: "\"<<\"" },
        peg$c157 = ">>",
        peg$c158 = { type: "literal", value: ">>", description: "\">>\"" },
        peg$c159 = "instanceof",
        peg$c160 = { type: "literal", value: "instanceof", description: "\"instanceof\"" },
        peg$c161 = "++",
        peg$c162 = { type: "literal", value: "++", description: "\"++\"" },
        peg$c163 = "--",
        peg$c164 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c165 = "(int)",
        peg$c166 = { type: "literal", value: "(int)", description: "\"(int)\"" },
        peg$c167 = "(double)",
        peg$c168 = { type: "literal", value: "(double)", description: "\"(double)\"" },
        peg$c169 = "(string)",
        peg$c170 = { type: "literal", value: "(string)", description: "\"(string)\"" },
        peg$c171 = "(array)",
        peg$c172 = { type: "literal", value: "(array)", description: "\"(array)\"" },
        peg$c173 = "(object)",
        peg$c174 = { type: "literal", value: "(object)", description: "\"(object)\"" },
        peg$c175 = "(bool)",
        peg$c176 = { type: "literal", value: "(bool)", description: "\"(bool)\"" },
        peg$c177 = "(unset)",
        peg$c178 = { type: "literal", value: "(unset)", description: "\"(unset)\"" },
        peg$c179 = { type: "other", description: "T_NEW" },
        peg$c180 = "new",
        peg$c181 = { type: "literal", value: "new", description: "\"new\"" },
        peg$c182 = { type: "other", description: "T_CLONE" },
        peg$c183 = "clone",
        peg$c184 = { type: "literal", value: "clone", description: "\"clone\"" },
        peg$c185 = { type: "other", description: "T_EXIT" },
        peg$c186 = "exit",
        peg$c187 = { type: "literal", value: "exit", description: "\"exit\"" },
        peg$c188 = { type: "other", description: "T_IF" },
        peg$c189 = "if",
        peg$c190 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c191 = { type: "other", description: "T_ELSEIF" },
        peg$c192 = "elseif",
        peg$c193 = { type: "literal", value: "elseif", description: "\"elseif\"" },
        peg$c194 = { type: "other", description: "T_ELSE" },
        peg$c195 = "else",
        peg$c196 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c197 = { type: "other", description: "T_ENDIF" },
        peg$c198 = "endif",
        peg$c199 = { type: "literal", value: "endif", description: "\"endif\"" },
        peg$c200 = { type: "other", description: "T_LNUMBER" },
        peg$c201 = { type: "other", description: "T_DNUMBER" },
        peg$c202 = { type: "other", description: "T_STRING" },
        peg$c203 = /^[_a-z]/i,
        peg$c204 = { type: "class", value: "[_a-z]i", description: "[_a-z]i" },
        peg$c205 = /^[_a-z0-9]/i,
        peg$c206 = { type: "class", value: "[_a-z0-9]i", description: "[_a-z0-9]i" },
        peg$c207 = function(l) { return l[0]+l[1].join(''); },
        peg$c208 = { type: "other", description: "T_STRING_VARNAME" },
        peg$c209 = function(n) { return { type: 'common.T_VARIABLE', name: n }; },
        peg$c210 = { type: "other", description: "T_VARIABLE" },
        peg$c211 = { type: "other", description: "T_NUM_STRING" },
        peg$c212 = "number",
        peg$c213 = { type: "literal", value: "number", description: "\"number\"" },
        peg$c214 = "(T_INLINE_HTML)",
        peg$c215 = { type: "literal", value: "(T_INLINE_HTML)", description: "\"(T_INLINE_HTML)\"" },
        peg$c216 = "(T_CHARACTER)",
        peg$c217 = { type: "literal", value: "(T_CHARACTER)", description: "\"(T_CHARACTER)\"" },
        peg$c218 = "(T_BAD_CHARACTER)",
        peg$c219 = { type: "literal", value: "(T_BAD_CHARACTER)", description: "\"(T_BAD_CHARACTER)\"" },
        peg$c220 = "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)",
        peg$c221 = { type: "literal", value: "quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)", description: "\"quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)\"" },
        peg$c222 = { type: "other", description: "T_CONSTANT_ENCAPSED_STRING" },
        peg$c223 = "echo",
        peg$c224 = { type: "literal", value: "echo", description: "\"echo\"" },
        peg$c225 = "do",
        peg$c226 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c227 = "while",
        peg$c228 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c229 = "endwhile",
        peg$c230 = { type: "literal", value: "endwhile", description: "\"endwhile\"" },
        peg$c231 = "for",
        peg$c232 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c233 = "endfor",
        peg$c234 = { type: "literal", value: "endfor", description: "\"endfor\"" },
        peg$c235 = "foreach",
        peg$c236 = { type: "literal", value: "foreach", description: "\"foreach\"" },
        peg$c237 = "endforeach",
        peg$c238 = { type: "literal", value: "endforeach", description: "\"endforeach\"" },
        peg$c239 = "declare",
        peg$c240 = { type: "literal", value: "declare", description: "\"declare\"" },
        peg$c241 = "enddeclare",
        peg$c242 = { type: "literal", value: "enddeclare", description: "\"enddeclare\"" },
        peg$c243 = "as",
        peg$c244 = { type: "literal", value: "as", description: "\"as\"" },
        peg$c245 = "switch",
        peg$c246 = { type: "literal", value: "switch", description: "\"switch\"" },
        peg$c247 = "endswitch",
        peg$c248 = { type: "literal", value: "endswitch", description: "\"endswitch\"" },
        peg$c249 = { type: "other", description: "T_CASE" },
        peg$c250 = "case",
        peg$c251 = { type: "literal", value: "case", description: "\"case\"" },
        peg$c252 = { type: "other", description: "T_DEFAULT" },
        peg$c253 = "default",
        peg$c254 = { type: "literal", value: "default", description: "\"default\"" },
        peg$c255 = { type: "other", description: "T_BREAK" },
        peg$c256 = "break",
        peg$c257 = { type: "literal", value: "break", description: "\"break\"" },
        peg$c258 = { type: "other", description: "T_CONTINUE" },
        peg$c259 = "continue",
        peg$c260 = { type: "literal", value: "continue", description: "\"continue\"" },
        peg$c261 = { type: "other", description: "T_FUNCTION" },
        peg$c262 = "function",
        peg$c263 = { type: "literal", value: "function", description: "\"function\"" },
        peg$c264 = { type: "other", description: "T_CONST" },
        peg$c265 = "const",
        peg$c266 = { type: "literal", value: "const", description: "\"const\"" },
        peg$c267 = { type: "other", description: "T_RETURN" },
        peg$c268 = "return",
        peg$c269 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c270 = { type: "other", description: "T_TRY" },
        peg$c271 = "try",
        peg$c272 = { type: "literal", value: "try", description: "\"try\"" },
        peg$c273 = { type: "other", description: "T_CATCH" },
        peg$c274 = "catch",
        peg$c275 = { type: "literal", value: "catch", description: "\"catch\"" },
        peg$c276 = { type: "other", description: "T_FINALLY" },
        peg$c277 = "finally",
        peg$c278 = { type: "literal", value: "finally", description: "\"finally\"" },
        peg$c279 = { type: "other", description: "T_THROW" },
        peg$c280 = "throw",
        peg$c281 = { type: "literal", value: "throw", description: "\"throw\"" },
        peg$c282 = { type: "other", description: "T_USE" },
        peg$c283 = "use",
        peg$c284 = { type: "literal", value: "use", description: "\"use\"" },
        peg$c285 = { type: "other", description: "T_INSTEADOF" },
        peg$c286 = "insteadof",
        peg$c287 = { type: "literal", value: "insteadof", description: "\"insteadof\"" },
        peg$c288 = { type: "other", description: "T_GLOBAL" },
        peg$c289 = "global",
        peg$c290 = { type: "literal", value: "global", description: "\"global\"" },
        peg$c291 = { type: "other", description: "T_STATIC" },
        peg$c292 = "static",
        peg$c293 = { type: "literal", value: "static", description: "\"static\"" },
        peg$c294 = { type: "other", description: "T_ABSTRACT" },
        peg$c295 = "abstract",
        peg$c296 = { type: "literal", value: "abstract", description: "\"abstract\"" },
        peg$c297 = { type: "other", description: "T_FINAL" },
        peg$c298 = "final",
        peg$c299 = { type: "literal", value: "final", description: "\"final\"" },
        peg$c300 = { type: "other", description: "T_PRIVATE" },
        peg$c301 = "private",
        peg$c302 = { type: "literal", value: "private", description: "\"private\"" },
        peg$c303 = { type: "other", description: "T_PROTECTED" },
        peg$c304 = "protected",
        peg$c305 = { type: "literal", value: "protected", description: "\"protected\"" },
        peg$c306 = { type: "other", description: "T_PUBLIC" },
        peg$c307 = "public",
        peg$c308 = { type: "literal", value: "public", description: "\"public\"" },
        peg$c309 = { type: "other", description: "T_VAR" },
        peg$c310 = "var",
        peg$c311 = { type: "literal", value: "var", description: "\"var\"" },
        peg$c312 = { type: "other", description: "T_UNSET" },
        peg$c313 = "unset",
        peg$c314 = { type: "literal", value: "unset", description: "\"unset\"" },
        peg$c315 = { type: "other", description: "T_ISSET" },
        peg$c316 = "isset",
        peg$c317 = { type: "literal", value: "isset", description: "\"isset\"" },
        peg$c318 = { type: "other", description: "T_EMPTY" },
        peg$c319 = "empty",
        peg$c320 = { type: "literal", value: "empty", description: "\"empty\"" },
        peg$c321 = { type: "other", description: "T_HALT_COMPILER" },
        peg$c322 = "__halt_compiler",
        peg$c323 = { type: "literal", value: "__halt_compiler", description: "\"__halt_compiler\"" },
        peg$c324 = { type: "other", description: "T_CLASS" },
        peg$c325 = "class",
        peg$c326 = { type: "literal", value: "class", description: "\"class\"" },
        peg$c327 = { type: "other", description: "T_TRAIT" },
        peg$c328 = "trait",
        peg$c329 = { type: "literal", value: "trait", description: "\"trait\"" },
        peg$c330 = { type: "other", description: "T_INTERFACE" },
        peg$c331 = "interface",
        peg$c332 = { type: "literal", value: "interface", description: "\"interface\"" },
        peg$c333 = { type: "other", description: "T_EXTENDS" },
        peg$c334 = "extends",
        peg$c335 = { type: "literal", value: "extends", description: "\"extends\"" },
        peg$c336 = { type: "other", description: "T_IMPLEMENTS" },
        peg$c337 = "implements",
        peg$c338 = { type: "literal", value: "implements", description: "\"implements\"" },
        peg$c339 = { type: "other", description: "T_OBJECT_OPERATOR" },
        peg$c340 = "->",
        peg$c341 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c342 = function() { return '.'; },
        peg$c343 = { type: "other", description: "T_DOUBLE_ARROW" },
        peg$c344 = "=>",
        peg$c345 = { type: "literal", value: "=>", description: "\"=>\"" },
        peg$c346 = function() { return ':'; },
        peg$c347 = { type: "other", description: "T_PAAMAYIM_NEKUDOTAYIM" },
        peg$c348 = "::",
        peg$c349 = { type: "literal", value: "::", description: "\"::\"" },
        peg$c350 = "list",
        peg$c351 = { type: "literal", value: "list", description: "\"list\"" },
        peg$c352 = "array",
        peg$c353 = { type: "literal", value: "array", description: "\"array\"" },
        peg$c354 = "callable",
        peg$c355 = { type: "literal", value: "callable", description: "\"callable\"" },
        peg$c356 = "__CLASS__",
        peg$c357 = { type: "literal", value: "__CLASS__", description: "\"__CLASS__\"" },
        peg$c358 = "__TRAIT__",
        peg$c359 = { type: "literal", value: "__TRAIT__", description: "\"__TRAIT__\"" },
        peg$c360 = "__METHOD__",
        peg$c361 = { type: "literal", value: "__METHOD__", description: "\"__METHOD__\"" },
        peg$c362 = "__FUNCTION__",
        peg$c363 = { type: "literal", value: "__FUNCTION__", description: "\"__FUNCTION__\"" },
        peg$c364 = "__LINE__",
        peg$c365 = { type: "literal", value: "__LINE__", description: "\"__LINE__\"" },
        peg$c366 = "__FILE__",
        peg$c367 = { type: "literal", value: "__FILE__", description: "\"__FILE__\"" },
        peg$c368 = { type: "other", description: "T_OPEN_TAG" },
        peg$c369 = "<?",
        peg$c370 = { type: "literal", value: "<?", description: "\"<?\"" },
        peg$c371 = "<?php",
        peg$c372 = { type: "literal", value: "<?php", description: "\"<?php\"" },
        peg$c373 = { type: "other", description: "T_OPEN_TAG_WITH_ECHO" },
        peg$c374 = "<?=",
        peg$c375 = { type: "literal", value: "<?=", description: "\"<?=\"" },
        peg$c376 = { type: "other", description: "T_CLOSE_TAG" },
        peg$c377 = "?>",
        peg$c378 = { type: "literal", value: "?>", description: "\"?>\"" },
        peg$c379 = { type: "other", description: "T_WHITESPACE" },
        peg$c380 = "\t",
        peg$c381 = { type: "literal", value: "\t", description: "\"\\t\"" },
        peg$c382 = "\x0B",
        peg$c383 = { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
        peg$c384 = "\f",
        peg$c385 = { type: "literal", value: "\f", description: "\"\\f\"" },
        peg$c386 = " ",
        peg$c387 = { type: "literal", value: " ", description: "\" \"" },
        peg$c388 = "\xA0",
        peg$c389 = { type: "literal", value: "\xA0", description: "\"\\xA0\"" },
        peg$c390 = "\uFEFF",
        peg$c391 = { type: "literal", value: "\uFEFF", description: "\"\\uFEFF\"" },
        peg$c392 = "\n",
        peg$c393 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c394 = "\r",
        peg$c395 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c396 = "\u2028",
        peg$c397 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c398 = "\u2029",
        peg$c399 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
        peg$c400 = { type: "other", description: "T_COMMENT" },
        peg$c401 = "//",
        peg$c402 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c403 = "#",
        peg$c404 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c405 = { type: "other", description: "T_DOC_COMMENT" },
        peg$c406 = "/*",
        peg$c407 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c408 = "*/",
        peg$c409 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c410 = "heredoc start (T_START_HEREDOC)",
        peg$c411 = { type: "literal", value: "heredoc start (T_START_HEREDOC)", description: "\"heredoc start (T_START_HEREDOC)\"" },
        peg$c412 = "heredoc end (T_END_HEREDOC)",
        peg$c413 = { type: "literal", value: "heredoc end (T_END_HEREDOC)", description: "\"heredoc end (T_END_HEREDOC)\"" },
        peg$c414 = "${",
        peg$c415 = { type: "literal", value: "${", description: "\"${\"" },
        peg$c416 = "{$",
        peg$c417 = { type: "literal", value: "{$", description: "\"{$\"" },
        peg$c418 = { type: "other", description: "T_NAMESPACE" },
        peg$c419 = "namespace",
        peg$c420 = { type: "literal", value: "namespace", description: "\"namespace\"" },
        peg$c421 = "__NAMESPACE__",
        peg$c422 = { type: "literal", value: "__NAMESPACE__", description: "\"__NAMESPACE__\"" },
        peg$c423 = "__DIR__ ",
        peg$c424 = { type: "literal", value: "__DIR__ ", description: "\"__DIR__ \"" },
        peg$c425 = "...",
        peg$c426 = { type: "literal", value: "...", description: "\"...\"" },
        peg$c427 = "**",
        peg$c428 = { type: "literal", value: "**", description: "\"**\"" },
        peg$c429 = "**=",
        peg$c430 = { type: "literal", value: "**=", description: "\"**=\"" },
        peg$c431 = function() {
          return text();
        },
        peg$c432 = "{",
        peg$c433 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c434 = "}",
        peg$c435 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c436 = function(s) {
            return { type: "common.T_STATEMENTS", data: s };
          },
        peg$c437 = function(c, s, ei, es) {
              return {
                type: "common.T_IF"
                , condition: c
                , statement: s
                , _elseif: ei
                , _else: es
              };
            },
        peg$c438 = ":",
        peg$c439 = { type: "literal", value: ":", description: "\":\"" },
        peg$c440 = ";",
        peg$c441 = { type: "literal", value: ";", description: "\";\"" },
        peg$c442 = "(",
        peg$c443 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c444 = ")",
        peg$c445 = { type: "literal", value: ")", description: "\")\"" },
        peg$c446 = function(t) {
              return { 
                type: 'internal.T_ECHO', statements: t 
              }; 
            },
        peg$c447 = ",",
        peg$c448 = { type: "literal", value: ",", description: "\",\"" },
        peg$c449 = function(c, s) {
            return { type: "common.T_ELSEIF", condition: c, statement: s };
          },
        peg$c450 = function(s) { return { type: 'common.T_ELSE', data: s }; },
        peg$c451 = function(e, l) { return makeList(e, l); },
        peg$c452 = function(n, v) {
            return {
              name: n,
              value: v
            };
          },
        peg$c453 = "?",
        peg$c454 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c455 = function() {
            console.log('-->' + text() + '<--');
          },
        peg$c456 = "@",
        peg$c457 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c458 = function(i, t) { return { type: 'internal.T_INCLUDE', target: t, ignore: i, once: true }; },
        peg$c459 = function(i, t) { return { type: 'internal.T_INCLUDE', target: t, ignore: i, once: false }; },
        peg$c460 = function(t) { return { type: 'internal.T_REQUIRE', target: t, once: true }; },
        peg$c461 = function(t) { return { type: 'internal.T_REQUIRE', target: t, once: false }; },
        peg$c462 = "`",
        peg$c463 = { type: "literal", value: "`", description: "\"`\"" },
        peg$c464 = function(t) { return t; },
        peg$c465 = { type: "other", description: "T_CLASS_NAME" },
        peg$c466 = function() { return ['()']; },
        peg$c467 = function(e) { return ['(', e, ')']; },
        peg$c468 = { type: "other", description: "T_PARAMETER_EXPR" },
        peg$c469 = function(t, r, v, d) {
            return { 
              type: 'function.T_PARAMETER', 
              name: v.name, 
              ref: r, 
              class: t,
              value: d == null ? null : d[3]
            };
          },
        peg$c470 = { type: "other", description: "T_NEW_EXPR" },
        peg$c471 = function(c, a) {
            return {
              type: 'class.T_NEW',
              name: c,
              ctor: typeof(a) == 'undefined' ? [] : a
            };
          },
        peg$c472 = function(r) { return typeof(r) != 'undefined' && r ? true : false; },
        peg$c473 = "true",
        peg$c474 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c475 = function() { return true; },
        peg$c476 = "false",
        peg$c477 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c478 = function() { return false; },
        peg$c479 = "[",
        peg$c480 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c481 = "]",
        peg$c482 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c483 = function(g, l) { return makeList(g, l); },
        peg$c484 = function(p, l) { return makeList(p, l); },
        peg$c485 = function(v, l) { return makeList(v, l); },
        peg$c486 = function(n, l) { return makeList(n, l); },
        peg$c487 = function() { return ['(', [], ')']; },
        peg$c488 = function(a, l) {

            return ['(', {
              type: 'common.T_ARGS', args: makeList(a, l)
            }, ')']; 
          },
        peg$c489 = function(a) { 
            return {
              type: 'common.T_ARRAY'
              ,items: a === null ? []: a
            };
          },
        peg$c490 = function(a) { 
            return {
              type: 'common.T_ARRAY'
              ,items: a === null ? []: a
            }; 
          },
        peg$c491 = { type: "other", description: "T_SCALAR" },
        peg$c492 = { type: "other", description: "T_COMMON_SCALAR" },
        peg$c493 = function() {
            return text();
          },
        peg$c494 = function(n) {
            return { type: 'internal.T_NAMESPACE', name: n, body: false };
          },
        peg$c495 = function(n, b) {
            return { type: 'internal.T_NAMESPACE', name: n, body: b };
          },
        peg$c496 = function(b) {
            return { type: 'internal.T_NAMESPACE', name: '\\', body: b };
          },
        peg$c497 = function(u) {
            return { type: 'internal.T_USE', ns: u };
          },
        peg$c498 = function(n, a) {
            return {
              name: n, alias: typeof(a) == 'undefined' || !a ? false: a[3]
            }
          },
        peg$c499 = function(n, p, s) {
              return {
                type: 'function.T_DECLARE',
                name: n,
                parameters: p,
                body: s
              };
            },
        peg$c500 = function(p) {
            return p == null ? [] : p[0];
          },
        peg$c501 = { type: "other", description: "T_FUNCTION_CALL" },
        peg$c502 = function(n, a) { 
            return { 
              type: 'function.T_CALL'
              , name: n
              , args: a
            };
          },
        peg$c503 = function(f, n, e, i, b) {
            var result = {
              type: 'class.T_DECLARE',
              flag: f,
              name: n,
              extends: typeof(e) == 'undefined' || !e ? false : e[1],
              implements: typeof(i) == 'undefined' || !i ? [] : i[1],
              properties: [],
              constants: [],
              methods: []
            };
            if (
              result.name == 'implements'
              || result.extends == 'implements'
            ) {
              expected('class name T_STRING but T_IMPLEMENTS found');
            }
            if (
              result.name == 'extends'
              || result.extends == 'extends'
            ) {
              expected('class name T_STRING but T_EXTENDS found');
            }
            var lastDoc = null;
            for(var i = 0; i < b.length; i++) {
              var tok = b[i];
              if ( typeof(tok) == 'object' && tok.type) {
                if (lastDoc) tok.doc = lastDoc;
                switch(tok.type) {
                  case 'class.T_CONST':
                    result.constants.push(tok);
                    break;
                  case 'class.T_PROPERTY':
                    result.properties.push(tok);
                    break;
                  case 'class.T_METHOD':
                    result.methods.push(tok);
                    break;
                  default:
                    throw new Error('Unexpected token ' + tok.type);
                }
                lastDoc = null;
              } else if ( tok.substring(0, 3) === '/**' ) {
                lastDoc = tok;
              }
            }
            return result;
          },
        peg$c504 = function() { return builder.T_ABSTRACT; },
        peg$c505 = function() { return builder.T_FINAL; },
        peg$c506 = function(n) { return n; },
        peg$c507 = function(c) {
            return {
              type: 'class.T_CONST',
              items: c
            };
          },
        peg$c508 = function(m, p) {
            return {
              type: 'class.T_PROPERTY',
              modifiers: m,
              properties: p
            };
          },
        peg$c509 = function(m, n, p, b) {
            return {
              type: 'class.T_METHOD',
              modifiers: m == null ? [] : m,
              name: n,
              parameters: p,
              body: b
            };
          },
        peg$c510 = function() { return [1]; },
        peg$c511 = function() { return builder.T_PUBLIC; },
        peg$c512 = function() { return builder.T_PROTECTED; },
        peg$c513 = function() { return builder.T_PRIVATE; },
        peg$c514 = function() { return builder.T_STATIC; },
        peg$c515 = function(a1, al) { return makeList(a1, al) },
        peg$c516 = function(n, d) {
            return {
              name: n.name,
              default: d !== null ? d[3] : null
            };
          },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsetop_statement();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsetop_statement();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNumericLiteral() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseHexIntegerLiteral();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 36) {
          s3 = peg$c5;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$parseDecimalDigit();
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c4;
        } else {
          peg$currPos = s2;
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c7(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDecimalLiteral();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 36) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parseDecimalDigit();
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c4;
          } else {
            peg$currPos = s2;
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c7(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }

      return s0;
    }

    function peg$parseDecimalLiteral() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseDecimalIntegerLiteral();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c8;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseDecimalDigit();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseDecimalDigit();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExponentPart();
            if (s4 === peg$FAILED) {
              s4 = peg$c10;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c11();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c8;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseDecimalDigit();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseDecimalDigit();
            }
          } else {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExponentPart();
            if (s3 === peg$FAILED) {
              s3 = peg$c10;
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c11();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDecimalIntegerLiteral();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseExponentPart();
            if (s2 === peg$FAILED) {
              s2 = peg$c10;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c11();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        }
      }

      return s0;
    }

    function peg$parseDecimalIntegerLiteral() {
      var s0, s1, s2, s3;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c12;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNonZeroDigit();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseDecimalDigit();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDecimalDigit();
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parseDecimalDigit() {
      var s0;

      if (peg$c14.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }

      return s0;
    }

    function peg$parseNonZeroDigit() {
      var s0;

      if (peg$c16.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }

      return s0;
    }

    function peg$parseExponentPart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseExponentIndicator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSignedInteger();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseExponentIndicator() {
      var s0;

      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c18) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }

      return s0;
    }

    function peg$parseSignedInteger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c20.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDecimalDigit();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDecimalDigit();
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseHexIntegerLiteral() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c22) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseHexDigit();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseHexDigit();
          }
        } else {
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c24(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseHexDigit() {
      var s0;

      if (peg$c25.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }

      return s0;
    }

    function peg$parseStringLiteral() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c28;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDoubleStringCharacter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDoubleStringCharacter();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c28;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c30(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c31;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSingleStringCharacter();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSingleStringCharacter();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c31;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c33(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }

      return s0;
    }

    function peg$parseDoubleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c28;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c34;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c4;
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c37();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c34;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c38(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parseSingleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c31;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c34;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c4;
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c37();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c34;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c38(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parseEscapeSequence() {
      var s0, s1, s2, s3;

      s0 = peg$parseCharacterEscapeSequence();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseDecimalDigit();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c4;
          } else {
            peg$currPos = s2;
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c39();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseHexEscapeSequence();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUnicodeEscapeSequence();
          }
        }
      }

      return s0;
    }

    function peg$parseCharacterEscapeSequence() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNonEscapeCharacter();
      }

      return s0;
    }

    function peg$parseSingleEscapeCharacter() {
      var s0, s1;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c31;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c28;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s0 = peg$c34;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 98) {
              s1 = peg$c40;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c42();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 102) {
                s1 = peg$c43;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c45();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 110) {
                  s1 = peg$c46;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c47); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c48();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 114) {
                    s1 = peg$c49;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c50); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c51();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 116) {
                      s1 = peg$c52;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c53); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c54();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 118) {
                        s1 = peg$c55;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c56); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c57();
                      }
                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNonEscapeCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseEscapeCharacter();
      if (s2 === peg$FAILED) {
        s2 = peg$parseT_EOL();
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c4;
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c37();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseEscapeCharacter() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDecimalDigit();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 120) {
            s0 = peg$c58;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c59); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 117) {
              s0 = peg$c60;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c61); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseHexEscapeSequence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 120) {
        s1 = peg$c58;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c62(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseUnicodeEscapeSequence() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 117) {
        s1 = peg$c60;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseHexDigit();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseHexDigit();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c3;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c62(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseMathOperators() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 124) {
        s0 = peg$c64;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 38) {
          s0 = peg$c66;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 94) {
            s0 = peg$c68;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s1 = peg$c8;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c70();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s0 = peg$c71;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c72); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s0 = peg$c73;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c74); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 42) {
                    s0 = peg$c75;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c76); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 47) {
                      s0 = peg$c77;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c78); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 37) {
                        s0 = peg$c79;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c80); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }

      return s0;
    }

    function peg$parseRelationalOperator() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 60) {
        s0 = peg$c82;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s0 = peg$c84;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 33) {
            s0 = peg$c86;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c87); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 126) {
              s0 = peg$c88;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c89); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s0 = peg$c90;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c91); }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }

      return s0;
    }

    function peg$parseT_INCLUDE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7) === peg$c93) {
        s0 = peg$c93;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }

      return s0;
    }

    function peg$parseT_INCLUDE_ONCE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 12) === peg$c96) {
        s0 = peg$c96;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }

      return s0;
    }

    function peg$parseT_REQUIRE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7) === peg$c99) {
        s0 = peg$c99;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }

      return s0;
    }

    function peg$parseT_REQUIRE_ONCE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 12) === peg$c102) {
        s0 = peg$c102;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }

      return s0;
    }

    function peg$parseT_EVAL() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4) === peg$c105) {
        s0 = peg$c105;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c106); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c104); }
      }

      return s0;
    }

    function peg$parseT_LOGICAL_OR() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c107) {
        s0 = peg$c107;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }

      return s0;
    }

    function peg$parseT_LOGICAL_XOR() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c109) {
        s0 = peg$c109;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }

      return s0;
    }

    function peg$parseT_LOGICAL_AND() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c111) {
        s0 = peg$c111;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c112); }
      }

      return s0;
    }

    function peg$parseT_PRINT() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c113) {
        s0 = peg$c113;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }

      return s0;
    }

    function peg$parseT_YIELD() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c115) {
        s0 = peg$c115;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }

      return s0;
    }

    function peg$parseT_PLUS_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c117) {
        s0 = peg$c117;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c118); }
      }

      return s0;
    }

    function peg$parseT_MINUS_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c119) {
        s0 = peg$c119;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }

      return s0;
    }

    function peg$parseT_MUL_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c121) {
        s0 = peg$c121;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }

      return s0;
    }

    function peg$parseT_DIV_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c123) {
        s0 = peg$c123;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c124); }
      }

      return s0;
    }

    function peg$parseT_CONCAT_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c125) {
        s0 = peg$c125;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c126); }
      }

      return s0;
    }

    function peg$parseT_MOD_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c127) {
        s0 = peg$c127;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c128); }
      }

      return s0;
    }

    function peg$parseT_AND_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c129) {
        s0 = peg$c129;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c130); }
      }

      return s0;
    }

    function peg$parseT_OR_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c131) {
        s0 = peg$c131;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c132); }
      }

      return s0;
    }

    function peg$parseT_XOR_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c133) {
        s0 = peg$c133;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c134); }
      }

      return s0;
    }

    function peg$parseT_SL_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c135) {
        s0 = peg$c135;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c136); }
      }

      return s0;
    }

    function peg$parseT_SR_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c137) {
        s0 = peg$c137;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }

      return s0;
    }

    function peg$parseT_BOOLEAN_OR() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c139) {
        s0 = peg$c139;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c140); }
      }

      return s0;
    }

    function peg$parseT_BOOLEAN_AND() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c141) {
        s0 = peg$c141;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }

      return s0;
    }

    function peg$parseT_IS_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c143) {
        s0 = peg$c143;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }

      return s0;
    }

    function peg$parseT_IS_NOT_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c145) {
        s0 = peg$c145;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c146); }
      }

      return s0;
    }

    function peg$parseT_IS_IDENTICAL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c147) {
        s0 = peg$c147;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }

      return s0;
    }

    function peg$parseT_IS_NOT_IDENTICAL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c149) {
        s0 = peg$c149;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c150); }
      }

      return s0;
    }

    function peg$parseT_IS_SMALLER_OR_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c151) {
        s0 = peg$c151;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c152); }
      }

      return s0;
    }

    function peg$parseT_IS_GREATER_OR_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c153) {
        s0 = peg$c153;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c154); }
      }

      return s0;
    }

    function peg$parseT_SL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c155) {
        s0 = peg$c155;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }

      return s0;
    }

    function peg$parseT_SR() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c157) {
        s0 = peg$c157;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c158); }
      }

      return s0;
    }

    function peg$parseT_INSTANCEOF() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c159) {
        s0 = peg$c159;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c160); }
      }

      return s0;
    }

    function peg$parseT_INC() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c161) {
        s0 = peg$c161;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c162); }
      }

      return s0;
    }

    function peg$parseT_DEC() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c163) {
        s0 = peg$c163;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c164); }
      }

      return s0;
    }

    function peg$parseT_INT_CAST() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c165) {
        s0 = peg$c165;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c166); }
      }

      return s0;
    }

    function peg$parseT_DOUBLE_CAST() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c167) {
        s0 = peg$c167;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c168); }
      }

      return s0;
    }

    function peg$parseT_STRING_CAST() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c169) {
        s0 = peg$c169;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c170); }
      }

      return s0;
    }

    function peg$parseT_ARRAY_CAST() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c171) {
        s0 = peg$c171;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c172); }
      }

      return s0;
    }

    function peg$parseT_OBJECT_CAST() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c173) {
        s0 = peg$c173;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c174); }
      }

      return s0;
    }

    function peg$parseT_BOOL_CAST() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c175) {
        s0 = peg$c175;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c176); }
      }

      return s0;
    }

    function peg$parseT_UNSET_CAST() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c177) {
        s0 = peg$c177;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c178); }
      }

      return s0;
    }

    function peg$parseT_NEW() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c180) {
        s0 = peg$c180;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c181); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }

      return s0;
    }

    function peg$parseT_CLONE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c183) {
        s0 = peg$c183;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c182); }
      }

      return s0;
    }

    function peg$parseT_EXIT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4) === peg$c186) {
        s0 = peg$c186;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c187); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c185); }
      }

      return s0;
    }

    function peg$parseT_IF() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c189) {
        s0 = peg$c189;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c190); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c188); }
      }

      return s0;
    }

    function peg$parseT_ELSEIF() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6) === peg$c192) {
        s0 = peg$c192;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c191); }
      }

      return s0;
    }

    function peg$parseT_ELSE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4) === peg$c195) {
        s0 = peg$c195;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c196); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c194); }
      }

      return s0;
    }

    function peg$parseT_ENDIF() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c198) {
        s0 = peg$c198;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c199); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c197); }
      }

      return s0;
    }

    function peg$parseT_LNUMBER() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseNumericLiteral();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c200); }
      }

      return s0;
    }

    function peg$parseT_DNUMBER() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseDecimalLiteral();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c201); }
      }

      return s0;
    }

    function peg$parseT_STRING() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c203.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c204); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c205.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c206); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c205.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c206); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c207(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c202); }
      }

      return s0;
    }

    function peg$parseT_STRING_VARNAME() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 36) {
        s2 = peg$c5;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 36) {
            s2 = peg$c5;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
        }
      } else {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseT_STRING();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c209(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c208); }
      }

      return s0;
    }

    function peg$parseT_VARIABLE() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsevariable();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c210); }
      }

      return s0;
    }

    function peg$parseT_NUM_STRING() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6) === peg$c212) {
        s0 = peg$c212;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c213); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c211); }
      }

      return s0;
    }

    function peg$parseT_INLINE_HTML() {
      var s0;

      if (input.substr(peg$currPos, 15) === peg$c214) {
        s0 = peg$c214;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c215); }
      }

      return s0;
    }

    function peg$parseT_CHARACTER() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c216) {
        s0 = peg$c216;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c217); }
      }

      return s0;
    }

    function peg$parseT_BAD_CHARACTER() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c218) {
        s0 = peg$c218;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }

      return s0;
    }

    function peg$parseT_ENCAPSED_AND_WHITESPACE() {
      var s0;

      if (input.substr(peg$currPos, 56) === peg$c220) {
        s0 = peg$c220;
        peg$currPos += 56;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c221); }
      }

      return s0;
    }

    function peg$parseT_CONSTANT_ENCAPSED_STRING() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseStringLiteral();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c222); }
      }

      return s0;
    }

    function peg$parseT_ECHO() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c223) {
        s0 = peg$c223;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c224); }
      }

      return s0;
    }

    function peg$parseT_DO() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c225) {
        s0 = peg$c225;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c226); }
      }

      return s0;
    }

    function peg$parseT_WHILE() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c227) {
        s0 = peg$c227;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c228); }
      }

      return s0;
    }

    function peg$parseT_ENDWHILE() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c229) {
        s0 = peg$c229;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c230); }
      }

      return s0;
    }

    function peg$parseT_FOR() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c231) {
        s0 = peg$c231;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c232); }
      }

      return s0;
    }

    function peg$parseT_ENDFOR() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c233) {
        s0 = peg$c233;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c234); }
      }

      return s0;
    }

    function peg$parseT_FOREACH() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c235) {
        s0 = peg$c235;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c236); }
      }

      return s0;
    }

    function peg$parseT_ENDFOREACH() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c237) {
        s0 = peg$c237;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c238); }
      }

      return s0;
    }

    function peg$parseT_DECLARE() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c239) {
        s0 = peg$c239;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c240); }
      }

      return s0;
    }

    function peg$parseT_ENDDECLARE() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c241) {
        s0 = peg$c241;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c242); }
      }

      return s0;
    }

    function peg$parseT_AS() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c243) {
        s0 = peg$c243;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c244); }
      }

      return s0;
    }

    function peg$parseT_SWITCH() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c245) {
        s0 = peg$c245;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c246); }
      }

      return s0;
    }

    function peg$parseT_ENDSWITCH() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c247) {
        s0 = peg$c247;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c248); }
      }

      return s0;
    }

    function peg$parseT_CASE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4) === peg$c250) {
        s0 = peg$c250;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c251); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c249); }
      }

      return s0;
    }

    function peg$parseT_DEFAULT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7) === peg$c253) {
        s0 = peg$c253;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c252); }
      }

      return s0;
    }

    function peg$parseT_BREAK() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c256) {
        s0 = peg$c256;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c257); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c255); }
      }

      return s0;
    }

    function peg$parseT_CONTINUE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 8) === peg$c259) {
        s0 = peg$c259;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c260); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c258); }
      }

      return s0;
    }

    function peg$parseT_FUNCTION() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 8) === peg$c262) {
        s0 = peg$c262;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c263); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c261); }
      }

      return s0;
    }

    function peg$parseT_CONST() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c265) {
        s0 = peg$c265;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c266); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c264); }
      }

      return s0;
    }

    function peg$parseT_RETURN() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6) === peg$c268) {
        s0 = peg$c268;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c269); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c267); }
      }

      return s0;
    }

    function peg$parseT_TRY() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c271) {
        s0 = peg$c271;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c272); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c270); }
      }

      return s0;
    }

    function peg$parseT_CATCH() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c274) {
        s0 = peg$c274;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c275); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c273); }
      }

      return s0;
    }

    function peg$parseT_FINALLY() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7) === peg$c277) {
        s0 = peg$c277;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c278); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c276); }
      }

      return s0;
    }

    function peg$parseT_THROW() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c280) {
        s0 = peg$c280;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c281); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c279); }
      }

      return s0;
    }

    function peg$parseT_USE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c283) {
        s0 = peg$c283;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c284); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c282); }
      }

      return s0;
    }

    function peg$parseT_INSTEADOF() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 9) === peg$c286) {
        s0 = peg$c286;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c287); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c285); }
      }

      return s0;
    }

    function peg$parseT_GLOBAL() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6) === peg$c289) {
        s0 = peg$c289;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c290); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c288); }
      }

      return s0;
    }

    function peg$parseT_STATIC() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6) === peg$c292) {
        s0 = peg$c292;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c293); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c291); }
      }

      return s0;
    }

    function peg$parseT_ABSTRACT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 8) === peg$c295) {
        s0 = peg$c295;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c296); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c294); }
      }

      return s0;
    }

    function peg$parseT_FINAL() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c298) {
        s0 = peg$c298;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c299); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c297); }
      }

      return s0;
    }

    function peg$parseT_PRIVATE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7) === peg$c301) {
        s0 = peg$c301;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c300); }
      }

      return s0;
    }

    function peg$parseT_PROTECTED() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 9) === peg$c304) {
        s0 = peg$c304;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c305); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c303); }
      }

      return s0;
    }

    function peg$parseT_PUBLIC() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 6) === peg$c307) {
        s0 = peg$c307;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c308); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c306); }
      }

      return s0;
    }

    function peg$parseT_VAR() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c310) {
        s0 = peg$c310;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c311); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c309); }
      }

      return s0;
    }

    function peg$parseT_UNSET() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c313) {
        s0 = peg$c313;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c314); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c312); }
      }

      return s0;
    }

    function peg$parseT_ISSET() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c316) {
        s0 = peg$c316;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c317); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c315); }
      }

      return s0;
    }

    function peg$parseT_EMPTY() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c319) {
        s0 = peg$c319;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c320); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c318); }
      }

      return s0;
    }

    function peg$parseT_HALT_COMPILER() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 15) === peg$c322) {
        s0 = peg$c322;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c323); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c321); }
      }

      return s0;
    }

    function peg$parseT_CLASS() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c325) {
        s0 = peg$c325;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c326); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c324); }
      }

      return s0;
    }

    function peg$parseT_TRAIT() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c328) {
        s0 = peg$c328;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c329); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c327); }
      }

      return s0;
    }

    function peg$parseT_INTERFACE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 9) === peg$c331) {
        s0 = peg$c331;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c332); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c330); }
      }

      return s0;
    }

    function peg$parseT_EXTENDS() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 7) === peg$c334) {
        s0 = peg$c334;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c335); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c333); }
      }

      return s0;
    }

    function peg$parseT_IMPLEMENTS() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 10) === peg$c337) {
        s0 = peg$c337;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c338); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c336); }
      }

      return s0;
    }

    function peg$parseT_OBJECT_OPERATOR() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c340) {
        s1 = peg$c340;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c341); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c342();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c339); }
      }

      return s0;
    }

    function peg$parseT_DOUBLE_ARROW() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c344) {
        s1 = peg$c344;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c345); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c346();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c343); }
      }

      return s0;
    }

    function peg$parseT_PAAMAYIM_NEKUDOTAYIM() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c348) {
        s1 = peg$c348;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c349); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c342();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c347); }
      }

      return s0;
    }

    function peg$parseT_LIST() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c350) {
        s0 = peg$c350;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c351); }
      }

      return s0;
    }

    function peg$parseT_ARRAY() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c352) {
        s0 = peg$c352;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c353); }
      }

      return s0;
    }

    function peg$parseT_CALLABLE() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c354) {
        s0 = peg$c354;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c355); }
      }

      return s0;
    }

    function peg$parseT_CLASS_C() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c356) {
        s0 = peg$c356;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c357); }
      }

      return s0;
    }

    function peg$parseT_TRAIT_C() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c358) {
        s0 = peg$c358;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c359); }
      }

      return s0;
    }

    function peg$parseT_METHOD_C() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c360) {
        s0 = peg$c360;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c361); }
      }

      return s0;
    }

    function peg$parseT_FUNC_C() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c362) {
        s0 = peg$c362;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c363); }
      }

      return s0;
    }

    function peg$parseT_LINE() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c364) {
        s0 = peg$c364;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c365); }
      }

      return s0;
    }

    function peg$parseT_FILE() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c366) {
        s0 = peg$c366;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c367); }
      }

      return s0;
    }

    function peg$parseT_OPEN_TAG() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c369) {
        s0 = peg$c369;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c370); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c371) {
          s0 = peg$c371;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c372); }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c368); }
      }

      return s0;
    }

    function peg$parseT_OPEN_TAG_WITH_ECHO() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c374) {
        s0 = peg$c374;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c375); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c373); }
      }

      return s0;
    }

    function peg$parseT_CLOSE_TAG() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c377) {
        s0 = peg$c377;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c378); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c376); }
      }

      return s0;
    }

    function peg$parseT_WHITESPACE() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseT_SPACE();
      if (s0 === peg$FAILED) {
        s0 = peg$parseT_EOL();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c379); }
      }

      return s0;
    }

    function peg$parseT_SPACE() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c380;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c381); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 11) {
          s0 = peg$c382;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c383); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 12) {
            s0 = peg$c384;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c385); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s0 = peg$c386;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c387); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 160) {
                s0 = peg$c388;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c389); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 65279) {
                  s0 = peg$c390;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c391); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseT_EOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c392;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c393); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c394;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c395); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8232) {
            s0 = peg$c396;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c397); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8233) {
              s0 = peg$c398;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c399); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseT_COMMENT() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c401) {
        s1 = peg$c401;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c402); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c403;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c404); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseT_EOL();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c4;
        } else {
          peg$currPos = s4;
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseT_EOL();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c4;
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c400); }
      }

      return s0;
    }

    function peg$parseT_DOC_COMMENT() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c406) {
        s1 = peg$c406;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c407); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c408) {
          s5 = peg$c408;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c409); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c4;
        } else {
          peg$currPos = s4;
          s4 = peg$c3;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c408) {
            s5 = peg$c408;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c409); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c4;
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c408) {
            s3 = peg$c408;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c409); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c405); }
      }

      return s0;
    }

    function peg$parseT_START_HEREDOC() {
      var s0;

      if (input.substr(peg$currPos, 31) === peg$c410) {
        s0 = peg$c410;
        peg$currPos += 31;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c411); }
      }

      return s0;
    }

    function peg$parseT_END_HEREDOC() {
      var s0;

      if (input.substr(peg$currPos, 27) === peg$c412) {
        s0 = peg$c412;
        peg$currPos += 27;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c413); }
      }

      return s0;
    }

    function peg$parseT_DOLLAR_OPEN_CURLY_BRACES() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c414) {
        s0 = peg$c414;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c415); }
      }

      return s0;
    }

    function peg$parseT_CURLY_OPEN() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c416) {
        s0 = peg$c416;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c417); }
      }

      return s0;
    }

    function peg$parseT_NAMESPACE() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 9) === peg$c419) {
        s0 = peg$c419;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c420); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c418); }
      }

      return s0;
    }

    function peg$parseT_NS_C() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c421) {
        s0 = peg$c421;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c422); }
      }

      return s0;
    }

    function peg$parseT_DIR() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c423) {
        s0 = peg$c423;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c424); }
      }

      return s0;
    }

    function peg$parseT_NS_SEPARATOR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 92) {
        s0 = peg$c34;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }

      return s0;
    }

    function peg$parseT_ELLIPSIS() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c425) {
        s0 = peg$c425;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c426); }
      }

      return s0;
    }

    function peg$parseT_POW() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c427) {
        s0 = peg$c427;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c428); }
      }

      return s0;
    }

    function peg$parseT_POW_EQUAL() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c429) {
        s0 = peg$c429;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c430); }
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseT_WHITESPACE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseT_COMMENT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseT_DOC_COMMENT();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c431();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetop_statement() {
      var s0;

      s0 = peg$parsefunction_declaration_statement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclass_declaration_statement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenamespace_statement();
          if (s0 === peg$FAILED) {
            s0 = peg$parsestatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parse__();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseinner_statement() {
      var s0;

      s0 = peg$parsefunction_declaration_statement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseclass_declaration_statement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parse__();
          }
        }
      }

      return s0;
    }

    function peg$parsestatements_body() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c432;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c433); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsestatement();
        if (s3 === peg$FAILED) {
          s3 = peg$parse__();
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsestatement();
          if (s3 === peg$FAILED) {
            s3 = peg$parse__();
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c434;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c435); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c436(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

      s0 = peg$currPos;
      s1 = peg$parseT_IF();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseparentheses_expr_req();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestatement();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parse__();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse__();
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseelseif();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseelseif();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parse__();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parse__();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseelse_single();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c10;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c437(s3, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_IF();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse__();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseparentheses_expr_req();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s4 = peg$c438;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c439); }
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseinner_statement();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseinner_statement();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse__();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseelseif();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseelseif();
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseelse_single();
                      if (s8 === peg$FAILED) {
                        s8 = peg$c10;
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseT_ENDIF();
                        if (s9 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 59) {
                            s10 = peg$c440;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c441); }
                          }
                          if (s10 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseT_WHILE();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse__();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse__();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseparentheses_expr_req();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parse__();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parse__();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsewhile_statement();
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseT_DO();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse__();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse__();
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsestatement();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parse__();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parse__();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseT_WHILE();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseparentheses_expr_req();
                      if (s6 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s7 = peg$c440;
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c441); }
                        }
                        if (s7 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseT_FOR();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse__();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parse__();
                }
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s3 = peg$c442;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c443); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parse__();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parse__();
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseexpr_list();
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        s7 = peg$parse__();
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          s7 = peg$parse__();
                        }
                        if (s6 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 59) {
                            s7 = peg$c440;
                            peg$currPos++;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c441); }
                          }
                          if (s7 !== peg$FAILED) {
                            s8 = [];
                            s9 = peg$parse__();
                            while (s9 !== peg$FAILED) {
                              s8.push(s9);
                              s9 = peg$parse__();
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parseexpr_list();
                              if (s9 !== peg$FAILED) {
                                s10 = [];
                                s11 = peg$parse__();
                                while (s11 !== peg$FAILED) {
                                  s10.push(s11);
                                  s11 = peg$parse__();
                                }
                                if (s10 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 59) {
                                    s11 = peg$c440;
                                    peg$currPos++;
                                  } else {
                                    s11 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c441); }
                                  }
                                  if (s11 !== peg$FAILED) {
                                    s12 = [];
                                    s13 = peg$parse__();
                                    while (s13 !== peg$FAILED) {
                                      s12.push(s13);
                                      s13 = peg$parse__();
                                    }
                                    if (s12 !== peg$FAILED) {
                                      s13 = peg$parseexpr_list();
                                      if (s13 !== peg$FAILED) {
                                        s14 = [];
                                        s15 = peg$parse__();
                                        while (s15 !== peg$FAILED) {
                                          s14.push(s15);
                                          s15 = peg$parse__();
                                        }
                                        if (s14 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 41) {
                                            s15 = peg$c444;
                                            peg$currPos++;
                                          } else {
                                            s15 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c445); }
                                          }
                                          if (s15 !== peg$FAILED) {
                                            s16 = [];
                                            s17 = peg$parse__();
                                            while (s17 !== peg$FAILED) {
                                              s16.push(s17);
                                              s17 = peg$parse__();
                                            }
                                            if (s16 !== peg$FAILED) {
                                              s17 = peg$parsefor_statement();
                                              if (s17 !== peg$FAILED) {
                                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c3;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c3;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c3;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c3;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c3;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c3;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c3;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c3;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c3;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseT_SWITCH();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseparentheses_expr_req();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseswitch_case_list();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseT_BREAK();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = [];
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parse__();
                      }
                    } else {
                      s3 = peg$c3;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseexpr();
                      if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c3;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c3;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$c10;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parse__();
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parse__();
                      }
                      if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s4 = peg$c440;
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c441); }
                        }
                        if (s4 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseT_CONTINUE();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = [];
                      s4 = peg$parse__();
                      if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$parse__();
                        }
                      } else {
                        s3 = peg$c3;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseexpr();
                        if (s4 !== peg$FAILED) {
                          s3 = [s3, s4];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c3;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c3;
                      }
                      if (s2 === peg$FAILED) {
                        s2 = peg$c10;
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parse__();
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$parse__();
                        }
                        if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 59) {
                            s4 = peg$c440;
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c441); }
                          }
                          if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseT_RETURN();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = [];
                        s4 = peg$parse__();
                        if (s4 !== peg$FAILED) {
                          while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parse__();
                          }
                        } else {
                          s3 = peg$c3;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseexpr();
                          if (s4 !== peg$FAILED) {
                            s3 = [s3, s4];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c3;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c3;
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$c10;
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = [];
                          s4 = peg$parse__();
                          while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parse__();
                          }
                          if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 59) {
                              s4 = peg$c440;
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c441); }
                            }
                            if (s4 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseT_ECHO();
                        if (s1 !== peg$FAILED) {
                          s2 = [];
                          s3 = peg$parse__();
                          if (s3 !== peg$FAILED) {
                            while (s3 !== peg$FAILED) {
                              s2.push(s3);
                              s3 = peg$parse__();
                            }
                          } else {
                            s2 = peg$c3;
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseexpr_list();
                            if (s3 !== peg$FAILED) {
                              s4 = [];
                              s5 = peg$parse__();
                              while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parse__();
                              }
                              if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 59) {
                                  s5 = peg$c440;
                                  peg$currPos++;
                                } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c441); }
                                }
                                if (s5 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c446(s3);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c3;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c3;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseyield_expr();
                          if (s1 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 59) {
                              s2 = peg$c440;
                              peg$currPos++;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c441); }
                            }
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseT_GLOBAL();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseglobal_var_list();
                              if (s2 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 59) {
                                  s3 = peg$c440;
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c441); }
                                }
                                if (s3 !== peg$FAILED) {
                                  s1 = [s1, s2, s3];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c3;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c3;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseT_STATIC();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parsestatic_var_list();
                                if (s2 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 59) {
                                    s3 = peg$c440;
                                    peg$currPos++;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c441); }
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c3;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c3;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c3;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseT_INLINE_HTML();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseT_UNSET();
                                  if (s1 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 40) {
                                      s2 = peg$c442;
                                      peg$currPos++;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c443); }
                                    }
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parsevariables_list();
                                      if (s3 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                          s4 = peg$c444;
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c445); }
                                        }
                                        if (s4 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 59) {
                                            s5 = peg$c440;
                                            peg$currPos++;
                                          } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c441); }
                                          }
                                          if (s5 !== peg$FAILED) {
                                            s1 = [s1, s2, s3, s4, s5];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c3;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c3;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c3;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c3;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c3;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseT_FOREACH();
                                    if (s1 !== peg$FAILED) {
                                      s2 = [];
                                      s3 = peg$parse__();
                                      while (s3 !== peg$FAILED) {
                                        s2.push(s3);
                                        s3 = peg$parse__();
                                      }
                                      if (s2 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 40) {
                                          s3 = peg$c442;
                                          peg$currPos++;
                                        } else {
                                          s3 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c443); }
                                        }
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parseexpr();
                                          if (s4 !== peg$FAILED) {
                                            s5 = peg$parseT_AS();
                                            if (s5 !== peg$FAILED) {
                                              s6 = peg$parseforeach_variable();
                                              if (s6 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                  s7 = peg$c444;
                                                  peg$currPos++;
                                                } else {
                                                  s7 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c445); }
                                                }
                                                if (s7 !== peg$FAILED) {
                                                  s8 = peg$parseforeach_statement();
                                                  if (s8 !== peg$FAILED) {
                                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c3;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c3;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c3;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c3;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c3;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c3;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c3;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c3;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseT_FOREACH();
                                      if (s1 !== peg$FAILED) {
                                        s2 = [];
                                        s3 = peg$parse__();
                                        while (s3 !== peg$FAILED) {
                                          s2.push(s3);
                                          s3 = peg$parse__();
                                        }
                                        if (s2 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 40) {
                                            s3 = peg$c442;
                                            peg$currPos++;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c443); }
                                          }
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parseexpr();
                                            if (s4 !== peg$FAILED) {
                                              s5 = peg$parseT_AS();
                                              if (s5 !== peg$FAILED) {
                                                s6 = peg$parsevariable();
                                                if (s6 !== peg$FAILED) {
                                                  s7 = peg$parseT_DOUBLE_ARROW();
                                                  if (s7 !== peg$FAILED) {
                                                    s8 = peg$parseforeach_variable();
                                                    if (s8 !== peg$FAILED) {
                                                      if (input.charCodeAt(peg$currPos) === 41) {
                                                        s9 = peg$c444;
                                                        peg$currPos++;
                                                      } else {
                                                        s9 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c445); }
                                                      }
                                                      if (s9 !== peg$FAILED) {
                                                        s10 = peg$parseforeach_statement();
                                                        if (s10 !== peg$FAILED) {
                                                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c3;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c3;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c3;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c3;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c3;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c3;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c3;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c3;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c3;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c3;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseT_DECLARE();
                                        if (s1 !== peg$FAILED) {
                                          s2 = [];
                                          s3 = peg$parse__();
                                          while (s3 !== peg$FAILED) {
                                            s2.push(s3);
                                            s3 = peg$parse__();
                                          }
                                          if (s2 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 40) {
                                              s3 = peg$c442;
                                              peg$currPos++;
                                            } else {
                                              s3 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c443); }
                                            }
                                            if (s3 !== peg$FAILED) {
                                              s4 = peg$parsedeclare_list();
                                              if (s4 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                  s5 = peg$c444;
                                                  peg$currPos++;
                                                } else {
                                                  s5 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c445); }
                                                }
                                                if (s5 !== peg$FAILED) {
                                                  s6 = peg$parsedeclare_statement();
                                                  if (s6 !== peg$FAILED) {
                                                    s1 = [s1, s2, s3, s4, s5, s6];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c3;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c3;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c3;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c3;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c3;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c3;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseT_TRY();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parsestatements_body();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parsecatches();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$parseoptional_finally();
                                                if (s4 === peg$FAILED) {
                                                  s4 = peg$c10;
                                                }
                                                if (s4 !== peg$FAILED) {
                                                  s1 = [s1, s2, s3, s4];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c3;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c3;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c3;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c3;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseT_THROW();
                                            if (s1 !== peg$FAILED) {
                                              s2 = [];
                                              s3 = peg$parse__();
                                              if (s3 !== peg$FAILED) {
                                                while (s3 !== peg$FAILED) {
                                                  s2.push(s3);
                                                  s3 = peg$parse__();
                                                }
                                              } else {
                                                s2 = peg$c3;
                                              }
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parseexpr();
                                                if (s3 !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 59) {
                                                    s4 = peg$c440;
                                                    peg$currPos++;
                                                  } else {
                                                    s4 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c441); }
                                                  }
                                                  if (s4 !== peg$FAILED) {
                                                    s1 = [s1, s2, s3, s4];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c3;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c3;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c3;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c3;
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 59) {
                                                s0 = peg$c440;
                                                peg$currPos++;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c441); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsestatements_body();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseexpr();
                                                  if (s1 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 59) {
                                                      s2 = peg$c440;
                                                      peg$currPos++;
                                                    } else {
                                                      s2 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c441); }
                                                    }
                                                    if (s2 !== peg$FAILED) {
                                                      s1 = [s1, s2];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c3;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c3;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefor_statement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsestatement();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s1 = peg$c438;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c439); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseinner_statement();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseinner_statement();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseT_ENDFOR();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s4 = peg$c440;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c441); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parseforeach_statement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsestatement();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s1 = peg$c438;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c439); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseinner_statement();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseinner_statement();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseT_ENDFOREACH();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s4 = peg$c440;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c441); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsedeclare_statement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsestatement();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s1 = peg$c438;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c439); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseinner_statement();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseinner_statement();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseT_ENDDECLARE();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s4 = peg$c440;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c441); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsedeclare_list() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsedeclare_list_element();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c447;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c448); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsedeclare_list_element();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c447;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedeclare_list_element();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsedeclare_list_element() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseT_STRING();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c90;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c91); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestatic_scalar();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseswitch_case_list() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c432;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c433); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c440;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c441); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsecase();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsecase();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c434;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c435); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s1 = peg$c438;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c439); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s2 = peg$c440;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c441); }
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c10;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parsecase();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsecase();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseT_ENDSWITCH();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 59) {
                  s5 = peg$c440;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c441); }
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsecase() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseT_CASE();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse__();
          }
        } else {
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseexpr();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c3;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c3;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c3;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseT_DEFAULT();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecase_separator();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseinner_statement();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseinner_statement();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsecase_separator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 58) {
        s0 = peg$c438;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c439); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s0 = peg$c440;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c441); }
        }
      }

      return s0;
    }

    function peg$parsewhile_statement() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsestatement();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s1 = peg$c438;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c439); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseinner_statement();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseinner_statement();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseT_ENDWHILE();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s4 = peg$c440;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c441); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parseelseif() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseT_ELSEIF();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseparentheses_expr();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestatement();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c449(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseelse_single() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseT_ELSE();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestatement();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c450(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseforeach_variable() {
      var s0, s1, s2;

      s0 = peg$parsevariable();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 38) {
          s1 = peg$c66;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsevariable();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parselist_expr();
        }
      }

      return s0;
    }

    function peg$parsecatches() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsecatch();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsecatch();
      }

      return s0;
    }

    function peg$parsecatch() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseT_CATCH();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c442;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c443); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsename();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseT_VARIABLE();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c444;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c445); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestatements_body();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseoptional_finally() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseT_FINALLY();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestatements_body();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseconstant_declaration_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseconstant_declaration();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c447;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse__();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseconstant_declaration();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse__();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse__();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c447;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseconstant_declaration();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c3;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c451(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseconstant_declaration() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseT_STRING();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c90;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c91); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestatic_scalar();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c452(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestatic_var_list() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsestatic_var();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c447;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c448); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsestatic_var();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c447;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestatic_var();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestatic_var() {
      var s0, s1, s2, s3;

      s0 = peg$parseT_VARIABLE();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_VARIABLE();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c90;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c91); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsestatic_scalar();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parseexpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c90;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c91); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 38) {
                s6 = peg$c66;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c67); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsevariable();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c3;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c3;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 38) {
                  s6 = peg$c66;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c67); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsenew_expr();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c3;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c3;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$parseexpr();
                }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsevariable();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse__();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseT_DEC();
            if (s3 === peg$FAILED) {
              s3 = peg$parseT_INC();
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parse__();
                }
              } else {
                s4 = peg$c3;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseexpr();
                if (s5 === peg$FAILED) {
                  s5 = peg$c10;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsepre_expr();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse__();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse__();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseMathOperators();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parse__();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parse__();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseexpr();
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsepre_expr();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse__();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse__();
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 63) {
                  s3 = peg$c453;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c454); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parse__();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parse__();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$currPos;
                    s6 = peg$parseexpr();
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parse__();
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parse__();
                      }
                      if (s7 !== peg$FAILED) {
                        s6 = [s6, s7];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c3;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c3;
                    }
                    if (s5 === peg$FAILED) {
                      s5 = peg$c10;
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s6 = peg$c438;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c439); }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = [];
                        s8 = peg$parse__();
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parse__();
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseexpr();
                          if (s8 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c455();
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsepre_expr();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse__();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parse__();
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parseT_STATIC();
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parse__();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parse__();
                    }
                    if (s5 !== peg$FAILED) {
                      s4 = [s4, s5];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c3;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c3;
                  }
                  if (s3 === peg$FAILED) {
                    s3 = peg$c10;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseT_FUNCTION();
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parse__();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parse__();
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 38) {
                          s6 = peg$c66;
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c67); }
                        }
                        if (s6 === peg$FAILED) {
                          s6 = peg$c10;
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parsefunction_args();
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parselexical_vars();
                            if (s8 === peg$FAILED) {
                              s8 = peg$c10;
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parsestatements_body();
                              if (s9 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c3;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsepre_expr();
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parse__();
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parse__();
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseexpr();
                    if (s3 === peg$FAILED) {
                      s3 = peg$c10;
                    }
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepre_expr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseT_ISSET();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c442;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c443); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsevariables_list();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parse__();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse__();
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c444;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c445); }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_EMPTY();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse__();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s3 = peg$c442;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c443); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseexpr();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c444;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c445); }
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c456;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c457); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$c10;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseT_INCLUDE_ONCE();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseoptional_parentheses_expr();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c458(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 64) {
              s1 = peg$c456;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c457); }
            }
            if (s1 === peg$FAILED) {
              s1 = peg$c10;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseT_INCLUDE();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseoptional_parentheses_expr();
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c459(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseT_REQUIRE_ONCE();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseoptional_parentheses_expr();
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c460(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseT_REQUIRE();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseoptional_parentheses_expr();
                  if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c461(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseT_EVAL();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseparentheses_expr();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseT_EXIT();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseoptional_parentheses_expr();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseT_PRINT();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseexpr();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseT_HALT_COMPILER();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseparentheses_expr();
                          if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 59) {
                              s3 = peg$c440;
                              peg$currPos++;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c441); }
                            }
                            if (s3 !== peg$FAILED) {
                              s1 = [s1, s2, s3];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsenew_expr();
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseT_CLONE();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseexpr();
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c3;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseT_OBJECT_OPERATOR();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseexpr();
                                if (s2 !== peg$FAILED) {
                                  s1 = [s1, s2];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c3;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c3;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseboolean_expr();
                                if (s1 !== peg$FAILED) {
                                  s2 = [];
                                  s3 = peg$parse__();
                                  while (s3 !== peg$FAILED) {
                                    s2.push(s3);
                                    s3 = peg$parse__();
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseexpr();
                                    if (s3 === peg$FAILED) {
                                      s3 = peg$c10;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s1 = [s1, s2, s3];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c3;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c3;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c3;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parselist_expr();
                                  if (s1 !== peg$FAILED) {
                                    s2 = [];
                                    s3 = peg$parse__();
                                    while (s3 !== peg$FAILED) {
                                      s2.push(s3);
                                      s3 = peg$parse__();
                                    }
                                    if (s2 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 61) {
                                        s3 = peg$c90;
                                        peg$currPos++;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c91); }
                                      }
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parseexpr();
                                        if (s4 !== peg$FAILED) {
                                          s1 = [s1, s2, s3, s4];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c3;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c3;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c3;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c3;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseT_INC();
                                    if (s1 !== peg$FAILED) {
                                      s2 = [];
                                      s3 = peg$parse__();
                                      while (s3 !== peg$FAILED) {
                                        s2.push(s3);
                                        s3 = peg$parse__();
                                      }
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parsevariable();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parse__();
                                          if (s4 !== peg$FAILED) {
                                            s5 = peg$parseexpr();
                                            if (s5 === peg$FAILED) {
                                              s5 = peg$c10;
                                            }
                                            if (s5 !== peg$FAILED) {
                                              s1 = [s1, s2, s3, s4, s5];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c3;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c3;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c3;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c3;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c3;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseT_DEC();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsevariable();
                                        if (s2 !== peg$FAILED) {
                                          s3 = [];
                                          s4 = peg$parse__();
                                          while (s4 !== peg$FAILED) {
                                            s3.push(s4);
                                            s4 = peg$parse__();
                                          }
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parseexpr();
                                            if (s4 === peg$FAILED) {
                                              s4 = peg$c10;
                                            }
                                            if (s4 !== peg$FAILED) {
                                              s1 = [s1, s2, s3, s4];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c3;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c3;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c3;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c3;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parsevariable();
                                        if (s1 !== peg$FAILED) {
                                          s2 = [];
                                          s3 = peg$parse__();
                                          while (s3 !== peg$FAILED) {
                                            s2.push(s3);
                                            s3 = peg$parse__();
                                          }
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parseT_PLUS_EQUAL();
                                            if (s3 === peg$FAILED) {
                                              s3 = peg$parseT_MINUS_EQUAL();
                                              if (s3 === peg$FAILED) {
                                                s3 = peg$parseT_MUL_EQUAL();
                                                if (s3 === peg$FAILED) {
                                                  s3 = peg$parseT_DIV_EQUAL();
                                                  if (s3 === peg$FAILED) {
                                                    s3 = peg$parseT_CONCAT_EQUAL();
                                                    if (s3 === peg$FAILED) {
                                                      s3 = peg$parseT_MOD_EQUAL();
                                                      if (s3 === peg$FAILED) {
                                                        s3 = peg$parseT_AND_EQUAL();
                                                        if (s3 === peg$FAILED) {
                                                          s3 = peg$parseT_OR_EQUAL();
                                                          if (s3 === peg$FAILED) {
                                                            s3 = peg$parseT_XOR_EQUAL();
                                                            if (s3 === peg$FAILED) {
                                                              s3 = peg$parseT_SL_EQUAL();
                                                              if (s3 === peg$FAILED) {
                                                                s3 = peg$parseT_SR_EQUAL();
                                                                if (s3 === peg$FAILED) {
                                                                  if (input.charCodeAt(peg$currPos) === 60) {
                                                                    s3 = peg$c82;
                                                                    peg$currPos++;
                                                                  } else {
                                                                    s3 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c83); }
                                                                  }
                                                                  if (s3 === peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 62) {
                                                                      s3 = peg$c84;
                                                                      peg$currPos++;
                                                                    } else {
                                                                      s3 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c85); }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            if (s3 !== peg$FAILED) {
                                              s4 = [];
                                              s5 = peg$parse__();
                                              while (s5 !== peg$FAILED) {
                                                s4.push(s5);
                                                s5 = peg$parse__();
                                              }
                                              if (s4 !== peg$FAILED) {
                                                s5 = peg$parseexpr();
                                                if (s5 !== peg$FAILED) {
                                                  s1 = [s1, s2, s3, s4, s5];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c3;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c3;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c3;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c3;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c3;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseT_INSTANCEOF();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parseclass_name_reference();
                                            if (s2 !== peg$FAILED) {
                                              s1 = [s1, s2];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c3;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c3;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseT_INT_CAST();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parseexpr();
                                              if (s2 !== peg$FAILED) {
                                                s1 = [s1, s2];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c3;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c3;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseT_DOUBLE_CAST();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parseexpr();
                                                if (s2 !== peg$FAILED) {
                                                  s1 = [s1, s2];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c3;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c3;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseT_STRING_CAST();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parseexpr();
                                                  if (s2 !== peg$FAILED) {
                                                    s1 = [s1, s2];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c3;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c3;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseT_ARRAY_CAST();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parseexpr();
                                                    if (s2 !== peg$FAILED) {
                                                      s1 = [s1, s2];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c3;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c3;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseT_OBJECT_CAST();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parseexpr();
                                                      if (s2 !== peg$FAILED) {
                                                        s1 = [s1, s2];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c3;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c3;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseT_BOOL_CAST();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parseexpr();
                                                        if (s2 !== peg$FAILED) {
                                                          s1 = [s1, s2];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c3;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c3;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseT_UNSET_CAST();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parseexpr();
                                                          if (s2 !== peg$FAILED) {
                                                            s1 = [s1, s2];
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c3;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c3;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          if (input.charCodeAt(peg$currPos) === 64) {
                                                            s1 = peg$c456;
                                                            peg$currPos++;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c457); }
                                                          }
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parseexpr();
                                                            if (s2 !== peg$FAILED) {
                                                              s1 = [s1, s2];
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c3;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c3;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsevariable();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parsescalar();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parsearray_expr();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsescalar_dereference();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$currPos;
                                                                    if (input.charCodeAt(peg$currPos) === 96) {
                                                                      s1 = peg$c462;
                                                                      peg$currPos++;
                                                                    } else {
                                                                      s1 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c463); }
                                                                    }
                                                                    if (s1 !== peg$FAILED) {
                                                                      s2 = peg$parsebackticks_expr();
                                                                      if (s2 === peg$FAILED) {
                                                                        s2 = peg$c10;
                                                                      }
                                                                      if (s2 !== peg$FAILED) {
                                                                        if (input.charCodeAt(peg$currPos) === 96) {
                                                                          s3 = peg$c462;
                                                                          peg$currPos++;
                                                                        } else {
                                                                          s3 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c463); }
                                                                        }
                                                                        if (s3 !== peg$FAILED) {
                                                                          s1 = [s1, s2, s3];
                                                                          s0 = s1;
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c3;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c3;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c3;
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseT_YIELD();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseoptional_parentheses_expr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c442;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c443); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c444;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c445); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c464(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsename() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsenamespace_name();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c465); }
      }

      return s0;
    }

    function peg$parseparentheses_expr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c442;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c443); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c444;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c445); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c466();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseparentheses_expr_req();
      }

      return s0;
    }

    function peg$parseparentheses_expr_req() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c442;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c443); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseexpr();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseexpr();
            }
          } else {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c444;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c445); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c467(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c442;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c443); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse__();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseyield_expr();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse__();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse__();
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c444;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c445); }
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c467(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parseparameter() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseclass_type();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s3 = peg$c66;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c67); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseT_VARIABLE();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s7 = peg$c90;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c91); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsestatic_scalar();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c3;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c3;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c3;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c3;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c469(s1, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c468); }
      }

      return s0;
    }

    function peg$parsenew_expr() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseT_NEW();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseclass_name_reference();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseargument_list();
              if (s5 === peg$FAILED) {
                s5 = peg$c10;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c471(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c470); }
      }

      return s0;
    }

    function peg$parseoptional_ref() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c66;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c472(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseargument() {
      var s0, s1, s2;

      s0 = peg$parseexpr();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 38) {
          s1 = peg$c66;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c10;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsevariable();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parseboolean_expr() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c473) {
        s1 = peg$c473;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c474); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c475();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c476) {
          s1 = peg$c476;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c477); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c478();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseglobal_var() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseT_VARIABLE();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 36) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsevariable();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 36) {
            s1 = peg$c5;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s2 = peg$c432;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c433); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseexpr();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s4 = peg$c434;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c435); }
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        }
      }

      return s0;
    }

    function peg$parseyield_expr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseT_YIELD();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse__();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseT_YIELD();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpr();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseT_DOUBLE_ARROW();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse__();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseexpr();
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsescalar_dereference() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsescalar_dereference_expr();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsescalar_dereference_expr();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c479;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c480); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedim_offset();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s4 = peg$c481;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c482); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsescalar_dereference_expr() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsearray_expr();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c479;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c480); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedim_offset();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c481;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c482); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_CONSTANT_ENCAPSED_STRING();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c479;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c480); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedim_offset();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s4 = peg$c481;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c482); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parselexical_vars() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseT_USE();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c442;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c443); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselexical_var_list();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c444;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c445); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parselexical_var() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseoptional_ref();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseT_VARIABLE();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parselist_expr() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseT_LIST();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c442;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c443); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parselist_expr_elements();
            if (s4 === peg$FAILED) {
              s4 = peg$c10;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c444;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c445); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parselist_expr_element() {
      var s0;

      s0 = peg$parselist_expr();
      if (s0 === peg$FAILED) {
        s0 = peg$parsevariable();
      }

      return s0;
    }

    function peg$parseencaps_list() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseencaps_list_expr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseencaps_var();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseencaps_list_expr();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseT_ENCAPSED_AND_WHITESPACE();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseencaps_list_expr();
        }
      }

      return s0;
    }

    function peg$parseencaps_list_expr() {
      var s0, s1, s2;

      s0 = peg$parseencaps_var();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_ENCAPSED_AND_WHITESPACE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseencaps_var();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsebackticks_expr() {
      var s0;

      s0 = peg$parseT_ENCAPSED_AND_WHITESPACE();
      if (s0 === peg$FAILED) {
        s0 = peg$parseencaps_list();
      }

      return s0;
    }

    function peg$parseexpr_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c447;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse__();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexpr();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse__();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse__();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c447;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpr();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c3;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c451(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parselist_expr_elements() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parselist_expr_element();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c447;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse__();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parselist_expr_element();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse__();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse__();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c447;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parselist_expr_element();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c3;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c451(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parselexical_var_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parselexical_var();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c447;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse__();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parselexical_var();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse__();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse__();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c447;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parselexical_var();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c3;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c451(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseglobal_var_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseglobal_var();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c447;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse__();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseglobal_var();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse__();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse__();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c447;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseglobal_var();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c3;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c483(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseparameter_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseparameter();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c447;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse__();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseparameter();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse__();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse__();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c447;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseparameter();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c3;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c484(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsevariables_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c447;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse__();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsevariable();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse__();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse__();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c447;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsevariable();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c3;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c485(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsename_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseT_STRING();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c447;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse__();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseT_STRING();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse__();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse__();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c447;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseT_STRING();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c3;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c486(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseargument_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c442;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c443); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s2 = peg$c444;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c445); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c487();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c442;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c443); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse__();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseargument();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse__();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse__();
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c447;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c448); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseargument();
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parse__();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parse__();
                      }
                      if (s10 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c3;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c3;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c3;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c3;
                }
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s7 = peg$c447;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c448); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parse__();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parse__();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseargument();
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parse__();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parse__();
                        }
                        if (s10 !== peg$FAILED) {
                          s7 = [s7, s8, s9, s10];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c3;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c3;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c3;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c3;
                  }
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s6 = peg$c444;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c445); }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c488(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsearray_expr() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseT_ARRAY();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c442;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c443); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsearray_pair_list();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c444;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c445); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c479;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c480); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsearray_pair_list();
          if (s2 === peg$FAILED) {
            s2 = peg$c10;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s3 = peg$c481;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c482); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsestatic_scalar() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c479;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c480); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestatic_array_pair_list();
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c481;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c482); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c489(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_ARRAY();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse__();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s3 = peg$c442;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c443); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse__();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse__();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsestatic_array_pair_list();
                if (s5 === peg$FAILED) {
                  s5 = peg$c10;
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parse__();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parse__();
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s7 = peg$c444;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c445); }
                    }
                    if (s7 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c490(s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseclass_name();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseT_PAAMAYIM_NEKUDOTAYIM();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseclass_const_name();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parsecommon_scalar();
          }
        }
      }

      return s0;
    }

    function peg$parsescalar() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseclass_name_or_var();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseT_PAAMAYIM_NEKUDOTAYIM();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseclass_const_name();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c28;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseencaps_list();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c28;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseT_START_HEREDOC();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseencaps_list();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseT_END_HEREDOC();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parsecommon_scalar();
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c491); }
      }

      return s0;
    }

    function peg$parsecommon_scalar() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c71;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseT_LNUMBER();
        if (s2 === peg$FAILED) {
          s2 = peg$parseT_DNUMBER();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c493();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseT_CONSTANT_ENCAPSED_STRING();
        if (s0 === peg$FAILED) {
          s0 = peg$parseT_LINE();
          if (s0 === peg$FAILED) {
            s0 = peg$parseT_FILE();
            if (s0 === peg$FAILED) {
              s0 = peg$parseT_DIR();
              if (s0 === peg$FAILED) {
                s0 = peg$parseT_CLASS_C();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseT_TRAIT_C();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseT_METHOD_C();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseT_FUNC_C();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseT_NS_C();
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseT_START_HEREDOC();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseT_ENCAPSED_AND_WHITESPACE();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseT_END_HEREDOC();
                              if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c3;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseT_START_HEREDOC();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseT_END_HEREDOC();
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c3;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c3;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsename();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c492); }
      }

      return s0;
    }

    function peg$parsestatic_array_pair_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsestatic_array_pair();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c447;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse__();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestatic_array_pair();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse__();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse__();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c447;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsestatic_array_pair();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c3;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c447;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c10;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c451(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsestatic_array_pair() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsestatic_scalar();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseT_DOUBLE_ARROW();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestatic_scalar();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsestatic_scalar();
      }

      return s0;
    }

    function peg$parsearray_pair_list() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsenon_empty_array_pair_list();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c447;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c448); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsenon_empty_array_pair_list() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsearray_pair();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c447;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c448); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsearray_pair();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c447;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsearray_pair();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsearray_pair() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseT_DOUBLE_ARROW();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpr();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseexpr();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseT_DOUBLE_ARROW();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 38) {
                s3 = peg$c66;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c67); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsevariable();
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 38) {
              s1 = peg$c66;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsevariable();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsevariable() {
      var s0;

      s0 = peg$parsebase_variable();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefunction_call();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenew_expr_array_deref();
        }
      }

      return s0;
    }

    function peg$parsenew_expr_array_deref() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsenew_expr_array_deref_expr();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenew_expr_array_deref_expr();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c479;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c480); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedim_offset();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s4 = peg$c481;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c482); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsenew_expr_array_deref_expr() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c442;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c443); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenew_expr();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c444;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c445); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s4 = peg$c479;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c480); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedim_offset();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s6 = peg$c481;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c482); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseobject_access() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseobject_access_expr();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseobject_access_expr();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseargument_list();
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseobject_access_expr();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s2 = peg$c479;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c480); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedim_offset();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s4 = peg$c481;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c482); }
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseobject_access_expr();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s2 = peg$c432;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c433); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseexpr();
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s4 = peg$c434;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c435); }
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseobject_access_expr() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsevariable_or_new_expr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseT_OBJECT_OPERATOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseobject_property();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsevariable_or_new_expr();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseT_OBJECT_OPERATOR();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseobject_property();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseargument_list();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parseobject_property() {
      var s0, s1, s2, s3;

      s0 = peg$parseT_STRING();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c432;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c433); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpr();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c434;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c435); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsevariable_without_objects();
        }
      }

      return s0;
    }

    function peg$parsevariable_or_new_expr() {
      var s0, s1, s2, s3;

      s0 = peg$parsevariable();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c442;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c443); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenew_expr();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s3 = peg$c444;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c445); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsevariable_without_objects() {
      var s0;

      s0 = peg$parsereference_variable();
      if (s0 === peg$FAILED) {
        s0 = peg$parseT_STRING_VARNAME();
      }

      return s0;
    }

    function peg$parsebase_variable() {
      var s0;

      s0 = peg$parsevariable_without_objects();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestatic_property();
      }

      return s0;
    }

    function peg$parsestatic_property() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseclass_name_or_var();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseT_PAAMAYIM_NEKUDOTAYIM();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 36) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsereference_variable();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsestatic_property_with_arrays();
      }

      return s0;
    }

    function peg$parsestatic_property_with_arrays() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsestatic_property_with_arrays_expr();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsestatic_property_with_arrays_expr();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c479;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c480); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedim_offset();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s4 = peg$c481;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c482); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsestatic_property_with_arrays_expr();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s2 = peg$c432;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c433); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseexpr();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s4 = peg$c434;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c435); }
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        }
      }

      return s0;
    }

    function peg$parsestatic_property_with_arrays_expr() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseclass_name_or_var();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseT_PAAMAYIM_NEKUDOTAYIM();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseT_VARIABLE();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseclass_name_or_var();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseT_PAAMAYIM_NEKUDOTAYIM();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 36) {
              s3 = peg$c5;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s4 = peg$c432;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c433); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseexpr();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s6 = peg$c434;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c435); }
                  }
                  if (s6 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsereference_variable() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsereference_variable_var();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c479;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c480); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedim_offset();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c481;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c482); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsereference_variable_var();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s2 = peg$c432;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c433); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpr();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c434;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c435); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsereference_variable_var();
        }
      }

      return s0;
    }

    function peg$parsereference_variable_var() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseT_STRING_VARNAME();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 36) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s2 = peg$c432;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c433); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpr();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c434;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c435); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsedim_offset() {
      var s0;

      s0 = peg$parseexpr();
      if (s0 === peg$FAILED) {
        s0 = peg$c10;
      }

      return s0;
    }

    function peg$parseencaps_var() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$parseT_VARIABLE();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_VARIABLE();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c479;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c480); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseencaps_var_offset();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s4 = peg$c481;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c482); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseT_VARIABLE();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseT_OBJECT_OPERATOR();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseT_STRING();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseT_DOLLAR_OPEN_CURLY_BRACES();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexpr();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s3 = peg$c434;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c435); }
                }
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseT_DOLLAR_OPEN_CURLY_BRACES();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseT_STRING_VARNAME();
                if (s2 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s3 = peg$c434;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c435); }
                  }
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseT_DOLLAR_OPEN_CURLY_BRACES();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseT_STRING_VARNAME();
                  if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 91) {
                      s3 = peg$c479;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c480); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseexpr();
                      if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                          s5 = peg$c481;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c482); }
                        }
                        if (s5 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s6 = peg$c434;
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c435); }
                          }
                          if (s6 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseT_CURLY_OPEN();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsevariable();
                    if (s2 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s3 = peg$c434;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c435); }
                      }
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseencaps_var_offset() {
      var s0;

      s0 = peg$parseT_STRING();
      if (s0 === peg$FAILED) {
        s0 = peg$parseT_NUM_STRING();
        if (s0 === peg$FAILED) {
          s0 = peg$parseT_VARIABLE();
        }
      }

      return s0;
    }

    function peg$parseobject_access_for_dcnr() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parseobject_access_for_dcnr_expr();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseobject_access_for_dcnr_expr();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseT_OBJECT_OPERATOR();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseobject_property();
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseobject_access_for_dcnr_expr();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s2 = peg$c479;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c480); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedim_offset();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s4 = peg$c481;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c482); }
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseobject_access_for_dcnr_expr();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s2 = peg$c432;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c433); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseexpr();
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s4 = peg$c434;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c435); }
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseobject_access_for_dcnr_expr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsebase_variable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseT_OBJECT_OPERATOR();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseobject_property();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsenamespace_statement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseT_NAMESPACE();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenamespace_name();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c440;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c441); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c494(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_NAMESPACE();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse__();
            }
          } else {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenamespace_name();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse__();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse__();
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s5 = peg$c432;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c433); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsetop_statement();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsetop_statement();
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s7 = peg$c434;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c435); }
                    }
                    if (s7 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c495(s3, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseT_NAMESPACE();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse__();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse__();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s3 = peg$c432;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c433); }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parsetop_statement();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsetop_statement();
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s5 = peg$c434;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c435); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c496(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseT_USE();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parse__();
                }
              } else {
                s2 = peg$c3;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsenamespace_list_alias();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parse__();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parse__();
                  }
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s5 = peg$c440;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c441); }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c497(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenamespace_name() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseT_NS_SEPARATOR();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseT_STRING();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseT_NS_SEPARATOR();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c3;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseT_STRING();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseT_NS_SEPARATOR();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseT_STRING();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c37();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsenamespace_list_alias() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsenamespace_alias();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c447;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse__();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsenamespace_alias();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse__();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse__();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c447;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsenamespace_alias();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c3;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c451(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsenamespace_alias() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsenamespace_name();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse__();
          }
        } else {
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseT_AS();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse__();
              }
            } else {
              s5 = peg$c3;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseT_STRING();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c3;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c3;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c3;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c3;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c498(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsefunction_declaration_statement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseT_FUNCTION();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s3 = peg$c66;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c67); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseT_STRING();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parse__();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse__();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsefunction_args();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parse__();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parse__();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsestatements_body();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c499(s4, s6, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsefunction_args() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c442;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c443); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseparameter_list();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse__();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse__();
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c3;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c3;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c10;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c444;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c445); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c500(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsefunction_call() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$parsefunction_call_expr();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsefunction_call_expr();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c479;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c480); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedim_offset();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s4 = peg$c481;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c482); }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c501); }
      }

      return s0;
    }

    function peg$parsefunction_call_expr() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseargument_list();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c502(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseclass_name_or_var();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseT_PAAMAYIM_NEKUDOTAYIM();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseT_STRING();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseargument_list();
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseclass_name_or_var();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseT_PAAMAYIM_NEKUDOTAYIM();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s3 = peg$c432;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c433); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseexpr();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s5 = peg$c434;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c435); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseargument_list();
                    if (s6 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsestatic_property();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseargument_list();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsevariable_without_objects();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseargument_list();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseclass_declaration_statement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseclass_flag();
      if (s1 === peg$FAILED) {
        s1 = peg$c10;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseT_CLASS();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseT_STRING();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = [];
                s8 = peg$parse__();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parse__();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseextends_from();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c3;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c3;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$c10;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseimplements_list();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c3;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c3;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c10;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parse__();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parse__();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 123) {
                        s9 = peg$c432;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c433); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseclass_statement_list();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s11 = peg$c434;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c435); }
                          }
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c503(s1, s5, s6, s7, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_INTERFACE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseT_STRING();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseinterface_extends_list();
            if (s3 === peg$FAILED) {
              s3 = peg$c10;
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s4 = peg$c432;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c433); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseclass_statement_list();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s6 = peg$c434;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c435); }
                  }
                  if (s6 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseT_TRAIT();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseT_STRING();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s3 = peg$c432;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c433); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseclass_statement_list();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s5 = peg$c434;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c435); }
                  }
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        }
      }

      return s0;
    }

    function peg$parseclass_flag() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseT_ABSTRACT();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c504();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_FINAL();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c505();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseclass_const_name() {
      var s0;

      s0 = peg$parseT_CLASS();
      if (s0 === peg$FAILED) {
        s0 = peg$parseT_STRING();
      }

      return s0;
    }

    function peg$parseclass_type() {
      var s0;

      s0 = peg$parseT_ARRAY();
      if (s0 === peg$FAILED) {
        s0 = peg$parseT_CALLABLE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseT_STRING();
        }
      }

      return s0;
    }

    function peg$parseextends_from() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseT_EXTENDS();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseT_STRING();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c506(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseinterface_extends_list() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseT_EXTENDS();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsename_list();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c506(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseimplements_list() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseT_IMPLEMENTS();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsename_list();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c506(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseclass_statement_list() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseclass_statement();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseclass_statement();
      }

      return s0;
    }

    function peg$parseclass_statement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseT_CONST();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseconstant_declaration_list();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse__();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse__();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c440;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c441); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c507(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsevariable_modifiers();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseproperty_declaration_list();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse__();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse__();
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s4 = peg$c440;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c441); }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c508(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenon_empty_member_modifiers();
          if (s1 === peg$FAILED) {
            s1 = peg$c10;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseT_FUNCTION();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parse__();
                }
              } else {
                s3 = peg$c3;
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 38) {
                  s4 = peg$c66;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c67); }
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$c10;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseT_STRING();
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parse__();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parse__();
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsefunction_args();
                      if (s7 !== peg$FAILED) {
                        s8 = [];
                        s9 = peg$parse__();
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$parse__();
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parsestatements_body();
                          if (s9 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c509(s1, s5, s7, s9);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c3;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c3;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c3;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c3;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parse__();
          }
        }
      }

      return s0;
    }

    function peg$parsevariable_modifiers() {
      var s0, s1, s2, s3;

      s0 = peg$parsenon_empty_member_modifiers();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_VAR();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse__();
            }
          } else {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c510();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsenon_empty_member_modifiers() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsemember_modifier();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsemember_modifier();
        }
      } else {
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsemember_modifier() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseT_PUBLIC();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
        } else {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c511();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseT_PROTECTED();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse__();
            }
          } else {
            s2 = peg$c3;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c512();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseT_PRIVATE();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse__();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse__();
              }
            } else {
              s2 = peg$c3;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c513();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseT_STATIC();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parse__();
                }
              } else {
                s2 = peg$c3;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c514();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseT_ABSTRACT();
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse__();
                if (s3 !== peg$FAILED) {
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parse__();
                  }
                } else {
                  s2 = peg$c3;
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c504();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseT_FINAL();
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parse__();
                  if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parse__();
                    }
                  } else {
                    s2 = peg$c3;
                  }
                  if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c505();
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseproperty_declaration_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseproperty_declaration();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse__();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse__();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c447;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c448); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse__();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseproperty_declaration();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse__();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse__();
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c3;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c447;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c448); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse__();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse__();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseproperty_declaration();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse__();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse__();
                  }
                  if (s8 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c3;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c3;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c3;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c3;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c515(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseproperty_declaration() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseT_VARIABLE();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parse__();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse__();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s4 = peg$c90;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c91); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse__();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse__();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsestatic_scalar();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c3;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c3;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c3;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c3;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c10;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c516(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parseclass_name() {
      var s0;

      s0 = peg$parseT_STATIC();
      if (s0 === peg$FAILED) {
        s0 = peg$parsename();
      }

      return s0;
    }

    function peg$parseclass_name_reference() {
      var s0;

      s0 = peg$parseclass_name();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedynamic_class_name_reference();
      }

      return s0;
    }

    function peg$parsedynamic_class_name_reference() {
      var s0;

      s0 = peg$parseobject_access_for_dcnr();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebase_variable();
      }

      return s0;
    }

    function peg$parseclass_name_or_var() {
      var s0;

      s0 = peg$parseclass_name();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereference_variable();
      }

      return s0;
    }

    function peg$parsetrait_adaptations() {
      var s0, s1, s2, s3;

      if (input.charCodeAt(peg$currPos) === 59) {
        s0 = peg$c440;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c441); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c432;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c433); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetrait_adaptation_list();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c434;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c435); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      }

      return s0;
    }

    function peg$parsetrait_adaptation_list() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsetrait_adaptation();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsetrait_adaptation();
      }

      return s0;
    }

    function peg$parsetrait_adaptation() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetrait_method_reference_fully_qualified();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseT_INSTEADOF();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsename_list();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s4 = peg$c440;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c441); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetrait_method_reference();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseT_AS();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsemember_modifier();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseT_STRING();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 59) {
                  s5 = peg$c440;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c441); }
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsetrait_method_reference();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseT_AS();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsemember_modifier();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 59) {
                  s4 = peg$c440;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c441); }
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsetrait_method_reference();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseT_AS();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseT_STRING();
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s4 = peg$c440;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c441); }
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c3;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c3;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c3;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c3;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetrait_method_reference_fully_qualified() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsename();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseT_PAAMAYIM_NEKUDOTAYIM();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseT_STRING();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c3;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c3;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsetrait_method_reference() {
      var s0;

      s0 = peg$parsetrait_method_reference_fully_qualified();
      if (s0 === peg$FAILED) {
        s0 = peg$parseT_STRING();
      }

      return s0;
    }


      var nestedSpaces = 0;
      var builder = require('./builder');
      function makeList(a1, al) {
        var result = [a1];
        if (al && al.length > 0) {
          al.forEach(function(a) {
            if (a[2]) result.push(a[2]);
          });
        }
        return result;
      }
      
      function makeInteger(o) {
        return parseInt(o.join(""), 10);
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
