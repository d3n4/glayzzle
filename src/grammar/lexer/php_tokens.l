<ST_IN_SCRIPTING>"include"           return tok.T_INCLUDE;
<ST_IN_SCRIPTING>"include_once"      return tok.T_INCLUDE_ONCE;
<ST_IN_SCRIPTING>"require"           return tok.T_REQUIRE;
<ST_IN_SCRIPTING>"require_once"      return tok.T_REQUIRE_ONCE;
<ST_IN_SCRIPTING>"eval"              return tok.T_EVAL;
<ST_IN_SCRIPTING>"or"                return tok.T_LOGICAL_OR;
<ST_IN_SCRIPTING>"xor"               return tok.T_LOGICAL_XOR;
<ST_IN_SCRIPTING>"and"               return tok.T_LOGICAL_AND;
<ST_IN_SCRIPTING>"print"             return tok.T_PRINT;
<ST_IN_SCRIPTING>"yield"             return tok.T_YIELD;
<ST_IN_SCRIPTING>"+="                return tok.T_PLUS_EQUAL;
<ST_IN_SCRIPTING>"-="                return tok.T_MINUS_EQUAL;
<ST_IN_SCRIPTING>"*="                return tok.T_MUL_EQUAL;
<ST_IN_SCRIPTING>"/="                return tok.T_DIV_EQUAL;
<ST_IN_SCRIPTING>".="                return tok.T_CONCAT_EQUAL;
<ST_IN_SCRIPTING>"%="                return tok.T_MOD_EQUAL;
<ST_IN_SCRIPTING>"&="                return tok.T_AND_EQUAL;
<ST_IN_SCRIPTING>"|="                return tok.T_OR_EQUAL;
<ST_IN_SCRIPTING>"^="                return tok.T_XOR_EQUAL;
<ST_IN_SCRIPTING>"<<="               return tok.T_SL_EQUAL;
<ST_IN_SCRIPTING>">>="               return tok.T_SR_EQUAL;
<ST_IN_SCRIPTING>"||"                return tok.T_BOOLEAN_OR;
<ST_IN_SCRIPTING>"&&"                return tok.T_BOOLEAN_AND;
<ST_IN_SCRIPTING>"=="                return tok.T_IS_EQUAL;
<ST_IN_SCRIPTING>"!="                return tok.T_IS_NOT_EQUAL;
<ST_IN_SCRIPTING>"==="               return tok.T_IS_IDENTICAL;
<ST_IN_SCRIPTING>"!=="               return tok.T_IS_NOT_IDENTICAL;
<ST_IN_SCRIPTING>"<="                return tok.T_IS_SMALLER_OR_EQUAL;
<ST_IN_SCRIPTING>">="                return tok.T_IS_GREATER_OR_EQUAL;
<ST_IN_SCRIPTING>"<<"                return tok.T_SL;
<ST_IN_SCRIPTING>">>"                return tok.T_SR;
<ST_IN_SCRIPTING>"instanceof"        return tok.T_INSTANCEOF;
<ST_IN_SCRIPTING>"++"                return tok.T_INC;
<ST_IN_SCRIPTING>"--"                return tok.T_DEC;
<ST_IN_SCRIPTING>"(int)"             return tok.T_INT_CAST;
<ST_IN_SCRIPTING>"(double)"          return tok.T_DOUBLE_CAST;
<ST_IN_SCRIPTING>"(string)"          return tok.T_STRING_CAST;
<ST_IN_SCRIPTING>"(array)"           return tok.T_ARRAY_CAST;
<ST_IN_SCRIPTING>"(object)"          return tok.T_OBJECT_CAST;
<ST_IN_SCRIPTING>"(bool)"            return tok.T_BOOL_CAST;
<ST_IN_SCRIPTING>"(unset)"           return tok.T_UNSET_CAST;
<ST_IN_SCRIPTING>"new"               return tok.T_NEW;
<ST_IN_SCRIPTING>"clone"             return tok.T_CLONE;