/* Tokens */
T_INCLUDE                               "T_INCLUDE"                             ="include"
T_INCLUDE_ONCE                          "T_INCLUDE_ONCE"                        ="include_once"
T_REQUIRE                               "T_REQUIRE"                             ="require"
T_REQUIRE_ONCE                          "T_REQUIRE_ONCE"                        ="require_once"
T_EVAL                                  "T_EVAL"                                ="eval"
T_LOGICAL_OR                            ="or"
T_LOGICAL_XOR                           ="xor"
T_LOGICAL_AND                           ="and"
T_PRINT        ="print"
T_YIELD        ="yield"
T_PLUS_EQUAL   ="+="
T_MINUS_EQUAL  ="-="
T_MUL_EQUAL    ="*="
T_DIV_EQUAL    ="/="
T_CONCAT_EQUAL =".="
T_MOD_EQUAL    ="%="
T_AND_EQUAL    ="&="
T_OR_EQUAL     ="|="
T_XOR_EQUAL    ="^="
T_SL_EQUAL     ="<<="
T_SR_EQUAL     =">>="
T_BOOLEAN_OR   ="||"
T_BOOLEAN_AND  ="&&"
T_IS_EQUAL     ="=="
T_IS_NOT_EQUAL ="!="
T_IS_IDENTICAL ="==="
T_IS_NOT_IDENTICAL      ="!=="
T_IS_SMALLER_OR_EQUAL   ="<="
T_IS_GREATER_OR_EQUAL   =">="
T_SL          ="<<"
T_SR          =">>"
T_INSTANCEOF  ="instanceof"
T_INC         ="++"
T_DEC         ="--"
T_INT_CAST    ="(int)"
T_DOUBLE_CAST ="(double)"
T_STRING_CAST ="(string)"
T_ARRAY_CAST  ="(array)"
T_OBJECT_CAST ="(object)"
T_BOOL_CAST   ="(bool)"
T_UNSET_CAST  ="(unset)"
T_NEW                                   "T_NEW"="new"
T_CLONE                                 "T_CLONE"="clone"
T_EXIT                                  "T_EXIT"="exit"
T_IF                                    "T_IF"="if"
T_ELSEIF                                "T_ELSEIF"="elseif"
T_ELSE                                  "T_ELSE"="else"
T_ENDIF                                 "T_ENDIF"="endif"
T_LNUMBER                               "T_LNUMBER"=NumericLiteral
T_DNUMBER                               "T_DNUMBER"=DecimalLiteral
T_STRING                                "T_STRING"                              = l:([_a-z]i[_a-z0-9]i*) { return l[0]+l[1].join(''); }
T_STRING_VARNAME                        "T_STRING_VARNAME"                      = '$'+ n:T_STRING { return { type: 'common.T_VARIABLE', name: n }; }
T_VARIABLE                              "T_VARIABLE"                            = variable
T_NUM_STRING                            "T_NUM_STRING"                          = "number" /** TODO ? **/
T_INLINE_HTML       ="(T_INLINE_HTML)"
T_CHARACTER         ="(T_CHARACTER)"
T_BAD_CHARACTER     ="(T_BAD_CHARACTER)"
T_ENCAPSED_AND_WHITESPACE   ="quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)"
T_CONSTANT_ENCAPSED_STRING  "T_CONSTANT_ENCAPSED_STRING"=StringLiteral
T_ECHO       ="echo"
T_DO         ="do"
T_WHILE      ="while"
T_ENDWHILE   ="endwhile"
T_FOR        ="for"
T_ENDFOR     ="endfor"
T_FOREACH    ="foreach"
T_ENDFOREACH ="endforeach"
T_DECLARE    ="declare"
T_ENDDECLARE ="enddeclare"
T_AS         ="as"
T_SWITCH     ="switch"
T_ENDSWITCH  ="endswitch"
T_CASE                                  "T_CASE"                                ="case"
T_DEFAULT                               "T_DEFAULT"                             ="default"
T_BREAK                                 "T_BREAK"                               ="break"
T_CONTINUE                              "T_CONTINUE"                            ="continue"
T_FUNCTION                              "T_FUNCTION"                            ="function"
T_CONST                                 "T_CONST"                               ="const"
T_RETURN                                "T_RETURN"                              ="return"
T_TRY                                   "T_TRY"                                 ="try"
T_CATCH                                 "T_CATCH"                               ="catch"
T_FINALLY                               "T_FINALLY"                             ="finally"
T_THROW                                 "T_THROW"                               ="throw"
T_USE                                   "T_USE"                                 ="use"
T_INSTEADOF                             "T_INSTEADOF"                           ="insteadof"
T_GLOBAL                                "T_GLOBAL"                              ="global"
T_STATIC                                "T_STATIC"                              ="static"
T_ABSTRACT                              "T_ABSTRACT"                            ="abstract"
T_FINAL                                 "T_FINAL"                               ="final"
T_PRIVATE                               "T_PRIVATE"                             ="private"
T_PROTECTED                             "T_PROTECTED"                           ="protected"
T_PUBLIC                                "T_PUBLIC"                              ="public"
T_VAR                                   "T_VAR"                                 ="var"
T_UNSET                                 "T_UNSET"                               ="unset"
T_ISSET                                 "T_ISSET"                               ="isset"
T_EMPTY                                 "T_EMPTY"                               ="empty"
T_HALT_COMPILER                         "T_HALT_COMPILER"                       ="__halt_compiler"
T_CLASS                                 "T_CLASS"                               ="class"
T_TRAIT                                 "T_TRAIT"                               ="trait"
T_INTERFACE                             "T_INTERFACE"                           ="interface"
T_EXTENDS                               "T_EXTENDS"                             ="extends"
T_IMPLEMENTS                            "T_IMPLEMENTS"                          ="implements"
T_OBJECT_OPERATOR                       "T_OBJECT_OPERATOR"                     ="->" { return '.'; }
T_DOUBLE_ARROW                          "T_DOUBLE_ARROW"                        ="=>" { return ':'; }
T_PAAMAYIM_NEKUDOTAYIM                  "T_PAAMAYIM_NEKUDOTAYIM"                ="::" { return '.'; }
T_LIST            ="list"
T_ARRAY           ="array"
T_CALLABLE        ="callable"
T_CLASS_C         ="__CLASS__"
T_TRAIT_C         ="__TRAIT__"
T_METHOD_C        ="__METHOD__"
T_FUNC_C          ="__FUNCTION__"
T_LINE            ="__LINE__"
T_FILE            ="__FILE__"

T_OPEN_TAG                              "T_OPEN_TAG"                            = "<?" / "<?php"
T_OPEN_TAG_WITH_ECHO                    "T_OPEN_TAG_WITH_ECHO"                  = "<?="
T_CLOSE_TAG                             "T_CLOSE_TAG"                           = "?>"

T_WHITESPACE                            "T_WHITESPACE"                          =(T_SPACE / T_EOL)
T_SPACE                                                                         ="\t" / "\v" / "\f" / " " / "\u00A0" / "\uFEFF"
T_EOL                                                                           ="\n" / "\r" / "\u2028" / "\u2029"
T_COMMENT                               "T_COMMENT"                             = ("//" / "#") (!T_EOL.)*
T_DOC_COMMENT                           "T_DOC_COMMENT"                         = "/*" (!"*/".)* "*/"

T_START_HEREDOC             ="heredoc start (T_START_HEREDOC)"
T_END_HEREDOC               ="heredoc end (T_END_HEREDOC)"
T_DOLLAR_OPEN_CURLY_BRACES  ="${"
T_CURLY_OPEN                ="{$"
T_NAMESPACE                             "T_NAMESPACE"                           ="namespace"
T_NS_C                                                                          ="__NAMESPACE__"
T_DIR                       ="__DIR__ "
T_NS_SEPARATOR              ="\\"
T_ELLIPSIS                  ="..."
T_POW                       ="**"
T_POW_EQUAL                 ="**="

__ = T_WHITESPACE / T_COMMENT / T_DOC_COMMENT